{"version":3,"sources":["modules/challenges/reducer.ts","modules/repositories/reducer.ts","modules/repositories/thunks.ts","modules/user/actions.ts","components/Logo/logo.svg","modules/challenges/actions.ts","modules/challenges/index.ts","api/challenge.ts","serviceWorker.ts","scenes/UserDetailScene/ParticipatedChallengeList/ParticipatedChallengeItem.tsx","scenes/MainScene/Jumbotron/index.tsx","components/Logo/index.tsx","components/Card/index.tsx","scenes/MainScene/AttendanceByDay/index.tsx","scenes/MainScene/AttendanceRatesRank/index.tsx","scenes/MainScene/LanguageUsage/index.tsx","scenes/MainScene/PopularRepositories/index.tsx","scenes/MainScene/AttendentList/index.tsx","scenes/MainScene/HottestRepository/index.tsx","scenes/MainScene/AllAttendanceChart/index.tsx","scenes/MainScene/index.tsx","components/SideMenu/index.tsx","lib/github.ts","scenes/UserDetailScene/UserDetailHeader/Footer.tsx","scenes/UserDetailScene/UserDetailHeader/index.tsx","scenes/SettingScene/ChallengeDetail.tsx","scenes/UserDetailScene/ParticipatedChallengeList/index.tsx","scenes/UserDetailScene/LatestAttendanceChart/index.tsx","scenes/UserDetailScene/ContributedReposList/ContributedRepoItem.tsx","scenes/UserDetailScene/ContributedReposList/index.tsx","scenes/UserDetailScene/index.tsx","components/Indicator/index.tsx","scenes/RegisterUserScene/RegistUser/index.tsx","scenes/RegisterUserScene/index.tsx","scenes/NotFoundScene/index.tsx","scenes/UserListScene/index.tsx","modules/index.ts","scenes/UserListScene/UserListContent/index.tsx","scenes/SettingScene/UserList/UserItem.tsx","scenes/SettingScene/UserList/index.tsx","scenes/SettingScene/index.tsx","scenes/InfoScene/index.tsx","index.tsx","modules/user/index.ts","modules/analytics/index.ts","modules/repositories/actions.ts","api/user.ts","api/analytics.ts","modules/user/thunks.ts","modules/challenges/thunks.ts","api/repo.ts","modules/repositories/index.ts","modules/analytics/reducer.ts","modules/analytics/actions.ts","modules/analytics/thunks.ts","modules/user/reducer.ts"],"names":["initialState","all_challenges","loading","error","data","challenges_by_user","latest_challenge","challenge","createReducer","GET_ALL_CHALLENGES","state","GET_ALL_CHALLENGES_SUCCESS","action","payload","GET_ALL_CHALLENGES_ERROR","CLEAR_ALL_CHALLENGES","GET_CHALLENGES_BY_USER","GET_CHALLENGES_BY_USER_SUCCESS","GET_CHALLENGES_BY_USER_ERROR","CLEAR_CHALLENGES_BY_USER","GET_LATEST_CHALLENGE","GET_LATEST_CHALLENGE_SUCCESS","GET_LATEST_CHALLENGE_ERROR","CLEAR_LATEST_CHALLENGE","repos_by_user","repo","GET_REPOSITORIES_BY_USER","GET_REPOSITORIES_BY_USER_SUCCESS","GET_REPOSITORIES_BY_USER_ERROR","GET_REPOSITORIES_BY_USER_CLEAR","getRepositoriesByUserThunk","user_name","dispatch","a","request","getRepositoriesByUserAsync","success","failure","getRepositoriesByUser","response","GET_USER_INFO","GET_USER_INFO_SUCCESS","GET_USER_INFO_ERROR","CLEAR_USER_INFO","GET_USERS_INFO","GET_USERS_INFO_SUCCESS","GET_USERS_INFO_ERROR","CLEAR_USERS_INFO","GET_USERS_PARTICIPATED_LATEST_CHALLENGE","GET_USERS_PARTICIPATED_LATEST_CHALLENGE_SUCCESS","GET_USERS_PARTICIPATED_LATEST_CHALLENGE_ERROR","CLEAR_USERS_PARTICIPATED_LATEST_CHALLENGE","GET_USERS_SEARCH","GET_USERS_SEARCH_SUCCESS","GET_USERS_SEARCH_ERROR","CLEAR_USERS_SEARCH","POST_USER_INFO","POST_USER_INFO_SUCCESS","POST_USER_INFO_ERROR","CLEAR_POST_USER_INFO","getUserInfoAsync","createAsyncAction","getUsersInfoAsync","postUserInfoAsync","getUsersSearchAsync","getUsersParticipatedLatestChallengeAsync","module","exports","getAllChallengesAsync","getChallengesByUserAsync","getLatestChallengeAsync","REACT_API_HOST","process","getAllChallenges","axios","get","res","getChallengesByUser","getLatestChallenge","postUserToChallenge","challenge_id","post","putChallenge","options","put","putChallengeFeatured","is_featured","deleteChallenge","delete","postChallenge","deleteUserFromChallenge","Boolean","window","location","hostname","match","DATE_STATE","Jumbotron","props","className","summary","current_challenge","title","role","left_days","repo_cnt","user_cnt","commit_cnt","challenge_duration","index","alt","src","logo","style","width","height","styles","margin","padding","color","Colors","card","fontSize","paddingTop","container","backgroundColor","background","boxShadow","shadow","marginRight","borderRadius","wrapper","paddingBottom","desc","text","sub","marginTop","marginBottom","children","AttendanceByDay","initialOptions","undefined","chart","type","xAxis","series","name","useState","setOptions","useEffect","attendances","forEach","date","push","moment","format","y","rate","_options","Card","highcharts","Highcharts","AttendanceRatesRank","colorByPoint","chartOptions","setChartOptions","rates","all_rates","count","length","slice","attendance","info","login","attendances_rate","parseFloat","toString","array","i","LanguageUsage","languages","language","_id","language_name","rate_percentage","itemStyles","fontWeight","owner","minHeight","factorContainer","display","flexDirection","factorItemContainer","flex","alignItems","justifyContent","factorTitle","factorDesc","PopularRepositoryInfo","setOwner","repoName","setRepoName","languageCnt","setLanguageCnt","split","description","contributor","overflowY","itemContainer","borderBottom","avatarWrapper","alignContent","overflow","avatar","username","displayName","descWrapper","linkWrapper","link","textDecoration","getUserAvatarUrl","user","avartar_url","id","avatar_size","users","map","key","to","blue","HottestRepositoryInfo","console","log","overflowX","maxHeight","headerWrapper","headerTable","borderCollapse","border","table","headerTitleEssential","headerTitle","contentWrapper","column","textAlign","AllAttendanceChart","displayDates","setDisplayDates","newDates","Object","keys","item","idx","isMoment","columnEssential","rank","toFixed","columns","MainScene","useSelector","analytics","all_attendances","popular_repo","hottest_repo","all_attendances_by_dates","users_participated_latest_challenge","useDispatch","getSummaryThunk","getAllAttendancesThunk","getLanguagesPopularityThunk","getUsersParticipatedLatestChallengeThunk","getHottestRepositoryThunk","getPopularRepositoryThunk","getAllAttendancesByDatesThunk","PopularRepositories","HottestRepository","AttendentList","href","Logo","exact","activeClassName","project_info","repository","url","target","rel","config","size","LINK","EMAIL","getAvatarURL","_avatar_size","getURL","result","toLowerCase","indexOf","getUserName","trim","UserDetailFooter","history","useHistory","fetchLoading","setFetchLoading","deleteLoading","setDeleteLoading","fn","alert","confirm","UserAPI","code","clearUserInfoThunk","getUsersInfoThunk","fetch","getUserInfoThunk","onClick","UserDetailHeader","ui","bio","_real_url","libGithub","blog","email","Footer","inputModeEnum","ParticipatedChallengeItem","isRequested","setIsRequested","calcDate","start_dt","finish_dt","mStartDt","mFinishDt","mNow","_state","SCHEDULED","diff","FINISHED","PROCEEDING","frm_start_dt","frm_finish_dt","getChallengesByUserThunk","getLatestChallengeAttendancesByUserThunk","defaultClass","calc","ParticipatedChallengeList","user_challenges","LatestAttendanceChart","_series","entries","commits","LanguageColors","require","ContributedRepoItem","repoOwner","setRepoOwner","numOfLanguages","setNumOfLanguages","splited_repo_name","_counts","lanColorStyle","current_rgb","lanPercentage","percentage","lanPercentageBar","gradient_items","counts","current_percentage","_color","toLocaleLowerCase","_style","join","lanPercentageBarStack","_styles","GithubLib","ContributedReposList","UserDetailScene","useParams","latest_challenge_attendances_by_user","getAllChallengesThunk","message","Indicator","iconStyle","maxWidth","input","highlight","default","btn","cursor","red","resultWrapper","resultSubText","resultText","resultTextHighlight","resultLink","RegistUser","post_user","errorMesg","setErrorMesg","inputMode","setInputMode","userName","setUserName","insertedUserName","setInsertedUserName","statusCode","clearPostUserInfoThunk","submit","postUserInfoThunk","placeholder","value","onChange","e","onKeyPress","which","keyCode","marginLeft","stHeader","subTitle","lineHeight","inputContainer","inputWrapper","inputBtn","borderTopRightRadius","borderBottomRightRadius","Index","NotFoundScene","UserListScene","clearUsersSearchThunk","rootReducer","combineReducers","UserListContent","ChallengeDetail","titleError","setTitleError","dateError","setDateError","challengeTitle","setChallengeTitle","Date","selectedFinishDt","setSelectedFinishDt","selectedStartDt","setSelectedStartDt","featured","init","toDate","nowDate","nextDate","clone","add","cancel","onCancel","valid","hasError","ChallengeAPI","update","mode","HIDE","ADD","selected","EDIT","UserItem","UserList","notParticipatedUsers","setNotParticipatedUsers","status","_notParticipated","found","participants","find","participant","isExpired","_mFinishDt","del","SettingScene","selectedChallengeId","setSelectedChallengeId","getLatestChallengeThunk","getDateString","getActiveClass","selectChallenge","addChalenge","InfoScene","store","createStore","applyMiddleware","Thunk","ReactDOM","render","StrictMode","path","component","RegisterUserScene","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","getUserInfo","getUsersInfo","postUserInfo","getUsersParticipatedLatestChallenge","deleteUser","fetchUserInfo","getUsersSearch","params","reponse","getSummary","getAllAttendances","getAllAttendancesByDates","getLatestChallengeAttendancesByUser","getLanguagesPopularity","getPopularRepository","getHottestRepository","userInfo","usersInfo","intialState","GET_SUMMARY","GET_SUMMARY_SUCCESS","GET_SUMMARY_ERROR","GET_ALL_ATTENDANCES","GET_ALL_ATTENDANCES_SUCCESS","GET_ALL_ATTENDANCES_ERROR","GET_ALL_ATTENDANCES_BY_DATES","GET_ALL_ATTENDANCES_BY_DATES_SUCCESS","GET_ALL_ATTENDANCES_BY_DATES_ERROR","GET_LANGUAGES_POPULARITY","GET_LANGUAGES_POPULARITY_SUCCESS","GET_LANGUAGES_POPULARITY_ERROR","GET_POPULAR_REPOSITORY","GET_POPULAR_REPOSITORY_SUCCESS","GET_POPULAR_REPOSITORY_ERROR","GET_HOTTEST_REPOSITORY","GET_HOTTEST_REPOSITORY_SUCCESS","GET_HOTTEST_REPOSITORY_ERROR","GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER","GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_SUCCESS","GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_ERROR","CLEAR_LATEST_CHALLENGE_ATTENDANCES_BY_USER","getSummaryAsync","getAllAttendancesAsync","getAllAttendancesByDatesAsync","getLanguagesPopularityAsync","getPopularRepositoryAsync","getHottestRepositoryAsync","getLatestChallengeAttendancesByUserAsync","searched_users"],"mappings":"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","file":"static/js/main.647e70a1.chunk.js","sourcesContent":["import { createReducer } from \"typesafe-actions\";\nimport { ChallengeAction, ChallengeState } from \"./types\";\nimport {\n    GET_ALL_CHALLENGES,\n    GET_ALL_CHALLENGES_SUCCESS,\n    GET_ALL_CHALLENGES_ERROR,\n    CLEAR_ALL_CHALLENGES,\n    GET_CHALLENGES_BY_USER,\n    GET_CHALLENGES_BY_USER_SUCCESS,\n    GET_CHALLENGES_BY_USER_ERROR,\n    CLEAR_CHALLENGES_BY_USER,\n    GET_LATEST_CHALLENGE,\n    GET_LATEST_CHALLENGE_SUCCESS,\n    GET_LATEST_CHALLENGE_ERROR,\n    CLEAR_LATEST_CHALLENGE,\n} from \"./actions\";\n\nconst initialState: ChallengeState = {\n    all_challenges: {\n        loading: false,\n        error: null,\n        data : null,\n    },\n    challenges_by_user:{\n        loading: false,\n        error: null,\n        data: null,\n    },\n    latest_challenge:{\n        loading: false,\n        error:null,\n        data:null,\n    }\n}\n\nconst challenge = createReducer<ChallengeState, ChallengeAction>(initialState, {\n    [GET_ALL_CHALLENGES]: (state)=>({\n        ...state,\n        all_challenges:{\n            loading: true,\n            error : null,\n            data: null,\n        }\n    }),\n    [GET_ALL_CHALLENGES_SUCCESS]: (state, action)=>({\n        ...state,\n        all_challenges:{\n            loading: false,\n            error: null,\n            data: action.payload\n        }\n    }),\n    [GET_ALL_CHALLENGES_ERROR]: (state, action)=>({\n        ...state,\n        all_challenges: {\n            loading: false,\n            error: action.payload,\n            data: null,\n        }\n    }),\n    [CLEAR_ALL_CHALLENGES]:(state)=>({\n        ...state,\n        all_challenges:{\n            ...initialState.all_challenges\n        }\n    }),\n    [GET_CHALLENGES_BY_USER]: (state, action)=>({\n        ...state,\n        challenges_by_user:{\n            loading: true,\n            error: null,\n            data: null,\n        }\n    }),\n    [GET_CHALLENGES_BY_USER_SUCCESS]:(state, action)=>({\n        ...state,\n        challenges_by_user:{\n            loading:false,\n            error:null,\n            data: action.payload\n        }\n    }),\n    [GET_CHALLENGES_BY_USER_ERROR]:(state, action)=>({\n        ...state,\n        challenges_by_user:{\n            loading: false,\n            error: action.payload,\n            data: null,\n        }\n    }),\n    [CLEAR_CHALLENGES_BY_USER]:(state, action)=>({\n        ...state,\n        challenges_by_user:{\n            ...initialState.challenges_by_user\n        }\n    }),\n    [GET_LATEST_CHALLENGE]:(state)=>({\n        ...state,\n        latest_challenge: {\n            loading: true,\n            error: null,\n            data: null,\n        }\n    }),\n    [GET_LATEST_CHALLENGE_SUCCESS]:(state,action)=>({\n        ...state,\n        latest_challenge:{\n            loading: false,\n            error: null,\n            data: action.payload\n        }\n    }),\n    [GET_LATEST_CHALLENGE_ERROR]:(state,action)=>({\n        ...state,\n        latest_challenge:{\n            loading:false,\n            error: action.payload,\n            data:null,\n        }\n    }),\n    [CLEAR_LATEST_CHALLENGE]:(state)=>({\n        ...state,\n        latest_challenge:{\n            ...initialState.latest_challenge\n        }\n    })\n});\n\nexport default challenge;","import {createReducer } from 'typesafe-actions';\nimport { RepositoryAction, RepositoryState } from './types';\nimport {\n    GET_REPOSITORIES_BY_USER,\n    GET_REPOSITORIES_BY_USER_CLEAR,\n    GET_REPOSITORIES_BY_USER_ERROR,\n    GET_REPOSITORIES_BY_USER_SUCCESS,\n} from './actions';\n\nconst initialState: RepositoryState = {\n    repos_by_user:{\n        loading: false,\n        error : null,\n        data: null,\n    }\n}\n\nconst repo = createReducer<RepositoryState, RepositoryAction>(initialState, {\n    [GET_REPOSITORIES_BY_USER]: (state)=>({\n        ...state,\n        repos_by_user:{\n            loading:true,\n            error:null,\n            data:null,\n        }\n    }),\n    [GET_REPOSITORIES_BY_USER_SUCCESS]:(state,action)=>({\n        ...state,\n        repos_by_user:{\n            loading:false,\n            error:null,\n            data:action.payload\n        }\n    }),\n    [GET_REPOSITORIES_BY_USER_ERROR]: (state,action)=>({\n        ...state,\n        repos_by_user:{\n            loading:false,\n            error:action.payload,\n            data:null,\n        }\n    }),\n    [GET_REPOSITORIES_BY_USER_CLEAR]:(state)=>({\n        ...state,\n        repos_by_user:{ ...initialState.repos_by_user }\n    })\n});\n\nexport default repo;","import { ThunkAction } from 'redux-thunk';\nimport { RootState } from '..';\nimport { RepositoryAction } from './types'\nimport { getRepositoriesByUser } from '../../api/repo';\nimport { getRepositoriesByUserAsync } from './actions';\n\nexport function getRepositoriesByUserThunk(user_name:string): ThunkAction<void, RootState, null,RepositoryAction>{\n    return async dispatch=>{\n        const { request, success, failure } = getRepositoriesByUserAsync;\n        dispatch(request());\n        try{\n            const response = await getRepositoriesByUser(user_name);\n            dispatch(success(response));\n        }\n        catch(e){\n            dispatch(failure(e));\n        }\n    }\n}\n\nexport function clearRepositoriesByUserThunk():ThunkAction<void, RootState, null, RepositoryAction>{\n    return dispatch=>{\n        const { cancel } = getRepositoriesByUserAsync;\n        dispatch(cancel());\n    }\n}","import { createAsyncAction } from \"typesafe-actions\";\nimport GitFarmResponse from \"../../api/interfaces/GitFarmResponse\";\nimport {\n    UserInfo,\n    UsersInfo,\n} from \"../../api/user\";\nimport { AxiosError } from \"axios\";\n\nexport const GET_USER_INFO = \"user/GET_USER_INFO\";\nexport const GET_USER_INFO_SUCCESS = \"user/GET_USER_INFO_SUCCESS\";\nexport const GET_USER_INFO_ERROR = \"user/GET_USER_INFO_ERROR\";\nexport const CLEAR_USER_INFO = \"user/CLEAR_USER_INFO\";\n\nexport const GET_USERS_INFO = \"user/GET_USERS_INFO\";\nexport const GET_USERS_INFO_SUCCESS = \"user/GET_USERS_INFO_SUCCESS\";\nexport const GET_USERS_INFO_ERROR = \"user/GET_USERS_INFO_ERROR\";\nexport const CLEAR_USERS_INFO = \"user/CLEAR_USERS_INFO\";\n\nexport const GET_USERS_PARTICIPATED_LATEST_CHALLENGE = \"user/GET_USERS_PARTICIPATED_LATEST_CHALLENGE\";\nexport const GET_USERS_PARTICIPATED_LATEST_CHALLENGE_SUCCESS = \"user/GET_USERS_PARTICIPATED_LATEST_CHALLENGE_SUCCESS\";\nexport const GET_USERS_PARTICIPATED_LATEST_CHALLENGE_ERROR = \"user/GET_USERS_PARTICIPATED_LATEST_CHALLENGE_ERROR\";\nexport const CLEAR_USERS_PARTICIPATED_LATEST_CHALLENGE = \"user/CLEAR_USERS_PARTICIPATED_LATEST_CHALLENGE\";\n\nexport const GET_USERS_SEARCH = \"user/GET_USERS_SEARCH\";\nexport const GET_USERS_SEARCH_SUCCESS = \"user/GET_USERS_SEARCH_SUCCESS\";\nexport const GET_USERS_SEARCH_ERROR = \"user/GET_USERS_SEARCH_ERROR\";\nexport const CLEAR_USERS_SEARCH = \"user/CLEAR_USERS_SEARCH\";\n\nexport const POST_USER_INFO = \"user/POST_USER_INFO\";\nexport const POST_USER_INFO_SUCCESS = \"user/POST_USER_INFO_SUCCESS\";\nexport const POST_USER_INFO_ERROR = \"user/POST_USER_INFO_ERROR\";\nexport const CLEAR_POST_USER_INFO = \"user/CLEAR_POST_USER_INFO\";\n\n// 비동기 액션 생성\nexport const getUserInfoAsync = createAsyncAction(\n    GET_USER_INFO,\n    GET_USER_INFO_SUCCESS,\n    GET_USER_INFO_ERROR,\n    CLEAR_USER_INFO\n)<undefined, UserInfo, AxiosError, undefined>();\n\nexport const getUsersInfoAsync = createAsyncAction(\n    GET_USERS_INFO,\n    GET_USERS_INFO_SUCCESS,\n    GET_USERS_INFO_ERROR,\n    CLEAR_USERS_INFO\n)<undefined, UsersInfo, AxiosError, undefined>();\n\nexport const postUserInfoAsync = createAsyncAction(\n    POST_USER_INFO,\n    POST_USER_INFO_SUCCESS,\n    POST_USER_INFO_ERROR,\n    CLEAR_POST_USER_INFO\n)<undefined, GitFarmResponse, AxiosError, undefined>();\n\nexport const getUsersSearchAsync = createAsyncAction(\n    GET_USERS_SEARCH,\n    GET_USERS_SEARCH_SUCCESS,\n    GET_USERS_SEARCH_ERROR,\n    CLEAR_USERS_SEARCH\n)<undefined, UsersInfo, AxiosError, undefined>();\n\nexport const getUsersParticipatedLatestChallengeAsync = createAsyncAction(\n    GET_USERS_PARTICIPATED_LATEST_CHALLENGE,\n    GET_USERS_PARTICIPATED_LATEST_CHALLENGE_SUCCESS,\n    GET_USERS_PARTICIPATED_LATEST_CHALLENGE_ERROR,\n    CLEAR_USERS_PARTICIPATED_LATEST_CHALLENGE,  \n)<undefined, UsersInfo, AxiosError, undefined>();\n","module.exports = __webpack_public_path__ + \"static/media/logo.4b196a2d.svg\";","import { createAsyncAction } from 'typesafe-actions';\nimport {\n    AllChallengesResponse, ChallengesByUserResponse, LatestChallengeResponse\n} from '../../api/challenge';\nimport { AxiosError } from 'axios';\n\nexport const GET_ALL_CHALLENGES = \"challenge/GET_ALL_CHALLENGES\";\nexport const GET_ALL_CHALLENGES_SUCCESS = \"challenge/GET_ALL_CHALLENGES_SUCCESS\";\nexport const GET_ALL_CHALLENGES_ERROR = \"challenge/GET_ALL_CHALLENGES_ERROR\";\nexport const CLEAR_ALL_CHALLENGES = \"challenge/CLEAR_ALL_CHALLENGES\";\n\nexport const GET_CHALLENGES_BY_USER = \"challenge/GET_CHALLENGES_BY_USER\";\nexport const GET_CHALLENGES_BY_USER_SUCCESS = \"challenge/GET_CHALLENGES_BY_USER_SUCCESS\";\nexport const GET_CHALLENGES_BY_USER_ERROR = \"challenge/GET_CHALLENGES_BY_USER_ERROR\";\nexport const CLEAR_CHALLENGES_BY_USER = \"challenge/CLEAR_CHALLENGES_BY_USER\";\n\nexport const GET_LATEST_CHALLENGE = \"challenge/GET_LATEST_CHALLEGE\";\nexport const GET_LATEST_CHALLENGE_SUCCESS = \"challenge/GET_LATEST_CHALLEGE_SUCCESS\";\nexport const GET_LATEST_CHALLENGE_ERROR = \"challenge/GET_LATEST_CHALLENGE_ERROR\";\nexport const CLEAR_LATEST_CHALLENGE = \"challenge/CLEAR_LATEST_CHALLENGE\";\n\nexport const getAllChallengesAsync = createAsyncAction(\n    GET_ALL_CHALLENGES,\n    GET_ALL_CHALLENGES_SUCCESS,\n    GET_ALL_CHALLENGES_ERROR,\n    CLEAR_ALL_CHALLENGES\n)<undefined, AllChallengesResponse, AxiosError, undefined>();\n\nexport const getChallengesByUserAsync = createAsyncAction(\n    GET_CHALLENGES_BY_USER,\n    GET_CHALLENGES_BY_USER_SUCCESS,\n    GET_CHALLENGES_BY_USER_ERROR,\n    CLEAR_CHALLENGES_BY_USER\n)<undefined, ChallengesByUserResponse, AxiosError, undefined>();\n\nexport const getLatestChallengeAsync = createAsyncAction(\n    GET_LATEST_CHALLENGE,\n    GET_LATEST_CHALLENGE_SUCCESS,\n    GET_LATEST_CHALLENGE_ERROR,\n    CLEAR_LATEST_CHALLENGE\n)<undefined, LatestChallengeResponse, AxiosError, undefined>();","export { default } from './reducer';\nexport * from './actions';\nexport * from './types';\nexport * from './thunks';","import axios from 'axios';\nimport GitFarmResponseInterface from './interfaces/GitFarmResponse';\nimport ChallengeInterface, { ChallengeUpdateInterface } from './interfaces/Challenge';\n\nconst REACT_API_HOST = process.env.REACT_APP_API_HOST;\n\n// 여태 개설된 모든 도전 종류\nexport async function getAllChallenges(){\n    const res = await axios.get<AllChallengesResponse>(\n        // getUrl('api/challenges/')\n        `${REACT_API_HOST}/api/challenges`\n    );\n    return res.data;\n}\n\n// 특정 사용자의 도전 결과를 가져옴 \nexport async function getChallengesByUser(user_name:string){\n    const res = await axios.get<ChallengesByUserResponse>(\n        `${REACT_API_HOST}/api/challenges/users/${user_name}`\n    );\n    return res.data;\n}\n\n// 가장 최근 도전을 가져옴\nexport async function getLatestChallenge(){\n    const res = await axios.get<LatestChallengeResponse>(\n        `${REACT_API_HOST}/api/challenges/latest`\n    );\n    return res.data;\n}\n\n// 특정 사용자를 해당 도전에 추가함\nexport async function postUserToChallenge(user_name:string, challenge_id:string){\n    const res = await axios.post<GitFarmResponseInterface>(\n        `${REACT_API_HOST}/api/challenges/${challenge_id}/users/${user_name}`\n    );\n    return res.data;\n}\n\nexport async function putChallenge(challenge_id: string, options:ChallengeUpdateInterface){\n    const res = await axios.put<GitFarmResponseInterface>(\n        `${REACT_API_HOST}/api/challenges/${challenge_id}`,\n        options\n    );\n    return res.data;\n}\n\nexport async function putChallengeFeatured(challenge_id: string, is_featured:Boolean){\n    const res = await axios.put<GitFarmResponseInterface>(\n        `${REACT_API_HOST}/api/challenges/${challenge_id}/featured`,\n        { is_featured : is_featured }\n    );\n    return res.data;\n}\n\n\nexport async function deleteChallenge(challenge_id: string){\n    const res = await axios.delete<GitFarmResponseInterface>(\n        `${REACT_API_HOST}/api/challenges/${challenge_id}`\n    );\n    return res.data;\n}\n\nexport async function postChallenge(options:ChallengeUpdateInterface){\n    const res = await axios.post<GitFarmResponseInterface>(\n        `${REACT_API_HOST}/api/challenges/`,\n        options\n    );\n    return res.data;\n}\n\nexport async function deleteUserFromChallenge(challenge_id:string, user_name:string){\n    const res = await axios.delete<GitFarmResponseInterface>(\n        `${REACT_API_HOST}/api/challenges/${challenge_id}/users/${user_name}`\n    );\n    return res.data;\n}\n\nexport interface AllChallengesResponse extends GitFarmResponseInterface{\n    data : [ChallengeInterface]\n}\n\nexport interface ChallengesByUserResponse extends GitFarmResponseInterface{\n    data : [ChallengeInterface]\n}\n\nexport interface LatestChallengeResponse extends GitFarmResponseInterface{\n    data : ChallengeInterface,\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\nimport { GoPulse, GoVerified, GoFlame } from 'react-icons/go';\nimport { MdDeleteForever } from 'react-icons/md';\nimport ChallengeInterface from '../../../api/interfaces/Challenge';\nimport moment from 'moment';\n\nimport { getChallengesByUserThunk } from '../../../modules/challenges';\nimport { RootState } from '../../../modules';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteUserFromChallenge } from '../../../api/challenge';\nimport { getLatestChallengeAttendancesByUserThunk } from '../../../modules/analytics';\n\ninterface ParticipatedChallengeItem {\n    data: ChallengeInterface;\n\n}\n\nenum DATE_STATE {\n    SCHEDULED,\n    PROCEEDING,\n    FINISHED,\n}\n\nconst ParticipatedChallengeItem = (props: ParticipatedChallengeItem) => {\n    const { user } = useSelector((state: RootState) => state.user);\n    const dispatch = useDispatch();\n    const [isRequested, setIsRequested] = useState(false);\n    const fn = {\n        calcDate: (start_dt: string, finish_dt: string) => {\n            const mStartDt = moment(start_dt);\n            const mFinishDt = moment(finish_dt);\n            const mNow = moment();\n            let _state = DATE_STATE.SCHEDULED;\n\n            if (mNow.diff(mFinishDt) > 0) {\n                // 만료된 경우 \n                _state = DATE_STATE.FINISHED;\n            }\n            else if (mNow.diff(mFinishDt) <= 0 && mNow.diff(mStartDt) > 0) {\n                // 진행중인 경우 \n                _state = DATE_STATE.PROCEEDING;\n            }\n            else {\n                _state = DATE_STATE.SCHEDULED;\n            }\n\n            return {\n                frm_start_dt: mStartDt.format('YYYY-MM-DD'),\n                frm_finish_dt: mFinishDt.format('YYYY-MM-DD'),\n                state: _state\n            };\n        },\n        delete: async (challenge_id: string, user_name: string | undefined) => {\n            if (isRequested) { alert('요청중입니다'); return; }\n            if(user_name){\n                if (window.confirm(\"이 도전을 취소할까요?\")) {\n                    setIsRequested(true);\n                    await deleteUserFromChallenge(challenge_id, user_name);\n                    setIsRequested(false);\n                    dispatch(getChallengesByUserThunk(user_name));\n                    dispatch(getLatestChallengeAttendancesByUserThunk(user_name));\n                }\n            }\n            else{\n                alert('잘못된 요청입니다');\n            }\n        }\n    }\n    const ui = {\n        class: (start_dt: string, finish_dt: string) => {\n            const calc = fn.calcDate(start_dt, finish_dt);\n            let defaultClass = \"challenge-card-container\";\n            switch (calc.state) {\n                case DATE_STATE.SCHEDULED:\n                    return defaultClass + \" scheduled\";\n                case DATE_STATE.PROCEEDING:\n                    return defaultClass + \" active\";\n                case DATE_STATE.FINISHED:\n                    return defaultClass + \" finished\";\n                default:\n                    return defaultClass;\n            }\n        },\n        state: (start_dt: string, finish_dt: string) => {\n            const calc = fn.calcDate(start_dt, finish_dt);\n            switch (calc.state) {\n                case DATE_STATE.SCHEDULED:\n                    return <p className=\"info\"><GoPulse />진행 예정</p>;\n                case DATE_STATE.PROCEEDING:\n                    return <p className=\"info\"><GoFlame />진행중</p>;\n                case DATE_STATE.FINISHED:\n                    return <p className=\"info\"><GoVerified />종료됨</p>;\n                default:\n                    return <></>;\n            }\n        },\n        date: (start_dt: string, finish_dt: string) => {\n            const calc = fn.calcDate(start_dt, finish_dt);\n            return <p className=\"date\">{calc.frm_start_dt} - {calc.frm_finish_dt}</p>\n        },\n        delete: (start_dt: string, finish_dt: string, challenge_id: string, user_name: string | undefined) => {\n            const calc = fn.calcDate(start_dt, finish_dt);\n            if (calc.state !== DATE_STATE.FINISHED) {\n                return (<button \n                        className=\"card-delete\" \n                        type=\"button\" \n                        onClick={() => fn.delete(challenge_id, user_name)} >\n                    <MdDeleteForever />\n                    <p>취소</p>\n                </button>);\n            } else { return (<></>); }\n        }\n    }\n    return (\n        <div className={ui.class(props.data.start_dt, props.data.finish_dt)}>\n            <p className=\"title\">{props.data.title}</p>\n            {ui.date(props.data.start_dt, props.data.finish_dt)}\n            <div className=\"desc-wrapper\">\n                {ui.state(props.data.start_dt, props.data.finish_dt)}\n                {ui.delete(props.data.start_dt, props.data.finish_dt, props.data.id, user.data?.data.login.toString())}\n            </div>\n        </div>);\n}\n\nexport default ParticipatedChallengeItem;","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from 'react';\nimport { Summary } from '../../../api/analytics';\n\ninterface JumbotronInterface {\n    summary : Summary | null,\n    loading: boolean,\n    error : Error | null,\n};\n\nconst Jumbotron = (props:JumbotronInterface) => {\n    return (\n        <>\n            {/* 현재 상황 */}\n            <div className=\"jumbotron\">\n                {/* 현재 진행중인 도전 내용 */}\n                <div className=\"jumbotron-item challenges\">\n                    <p className=\"title\">{props.summary?.data.current_challenge.title}<span role=\"img\">🌱</span></p>\n                    <div className=\"jumbotron-item-body\">\n                        <p className=\"desc\">완료까지</p>\n                        <p className=\"count\">{ props.summary ? props.summary.data.current_challenge.left_days : 0 }</p>\n                        <p className=\"desc\">일</p>\n                    </div>\n                </div>\n                {/* 진행중인 정원사 일정 수 */}\n                <div className=\"jumbotron-item projects\">\n                    <p className=\"title\">등록된 저장소💻</p>\n                    {/* <MdDateRange/> */}\n                    <div className=\"jumbotron-item-body\">\n                        <p className=\"count\">{ props.summary ? props.summary.data.repo_cnt : 0 }</p>\n                        <p className=\"desc\">건</p>\n                    </div>\n                </div>\n                {/* 참여중인 정원사 수 */}\n                <div className=\"jumbotron-item participants\">\n                    <p className=\"title\">참여중인 정원사👩‍💻</p>\n                    <div className=\"jumbotron-item-body\">\n                        <p className=\"count\">{ props.summary ? props.summary.data.user_cnt : 0 }</p>\n                        <p className=\"desc\">명</p>\n                    </div>\n                </div>\n                {/* 모든 커밋 수 */}\n                <div className=\"jumbotron-item commits\">\n                    <p className=\"title\">현재까지 기록된 커밋🌱</p>\n                    <div className=\"jumbotron-item-body\">\n                        <p className=\"count\">{ props.summary ? props.summary.data.commit_cnt : 0 }</p>\n                        <p className=\"desc\">건</p>\n                    </div>\n                </div>\n                {/* 모든 진행일수 */}\n                <div className=\"jumbotron-item period\">\n                    <p className=\"title\">다 같이 도전한 기간🌈</p>\n                    <div className=\"jumbotron-item-body\">\n                        <p className=\"count\">{ props.summary ? props.summary.data.challenge_duration : 0 }</p>\n                        <p className=\"desc\">일</p>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Jumbotron;","import React from 'react';\nimport logo from './logo.svg';\n\ninterface LogoProps {\n    width: Number,\n    height: Number,\n}\n\nconst index = (props: LogoProps) => {\n    return (\n        <img alt=\"logo\" src={logo} style={{ width: props.width + \"px\", height: props.height + \"px\" }} />\n    );\n}\n\nexport default index;","import React, { CSSProperties, FunctionComponent } from 'react';\n\nimport Colors from '../Colors.json';\n\ntype CardProps = {\n    title: string,\n    desc?:string,\n}\n\nconst index: FunctionComponent<CardProps> = props => {\n    return (\n        <div style={styles.container}>\n            <p style={ styles.title  }>\n                {props.title}\n            </p>\n            <p style={ styles.desc }>{props.desc}</p>\n            <div style={ styles.wrapper }>\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nconst styles: { [name: string]: CSSProperties } = {\n    title:{\n        margin:0,\n        padding:0,\n        color:Colors.card.title,\n        fontSize:'1.5em',\n        paddingTop:'15px',\n    },\n    container: {\n        // width:'fit-content'\n        // backgroundColor:'#fff',\n        backgroundColor:Colors.card.background,\n        // minHeight:'50px',\n        boxShadow:\"2px 2px 3px 0px\" + Colors.shadow,\n        padding: '0px 20px',\n        marginRight: '30px',\n        borderRadius:'10px',\n        height:'100%'\n    },\n    wrapper: {\n        // borderTop:'1px solid #4c5365',\n        // marginTop:'10px',\n        // paddingTop:'10px',\n        paddingBottom:'10px',\n        // paddingBottom:'15px',\n        // backgroundColor:'red',\n        // height:'300px',\n    },\n    desc: {\n        margin:0,\n        padding:0,\n        color:Colors.text.sub,\n        fontSize:'.8em',\n        marginTop:'.3em',\n        marginBottom:\"1em\"\n    }\n}\n\nexport default index;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { CSSProperties, useState, useEffect } from 'react';\nimport { Card } from '../../../components';\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { AllAttendancesByDates } from '../../../api/analytics';\nimport moment from 'moment';\n\ninterface AttendanceByDayProps {\n    attendances : AllAttendancesByDates| null,\n}\n\nconst AttendanceByDay = (props:AttendanceByDayProps)=>{\n    const initialOptions:any = {\n        title: undefined,\n        chart: {\n            type: \"line\"\n        },\n        xAxis: {\n            type:\"category\"\n        },\n        series: [\n            {\n                name: \"출석률\",\n                data:[]\n            }\n        ]\n    };\n\n    const [options , setOptions] = useState(initialOptions);\n    useEffect(()=>{\n        if(props.attendances && props.attendances.data){\n            let data:any[] = [];\n            props.attendances.data.forEach(date=>{\n                data.push({\n                    name : moment(date.date).format('MM/DD'),\n                    y : date.rate\n                });\n            });\n            let _options = { ...initialOptions };\n            _options.series[0].data = data;\n            setOptions(_options);   \n        }\n    },[props.attendances]);\n\n    return(<div style={ styles.container }>\n        <Card title=\"일별 출석률\" desc=\"정원사분들의 일별 출석율 현황을 보여줍니다\">\n            {/* CARD BODY */}\n            <div style={ styles.wrapper }>\n                <HighchartsReact\n                    highcharts={ Highcharts }\n                    options={ options }\n                />\n            </div>\n        </Card>\n    </div>);    \n}\n\nconst styles:{ [name:string]: CSSProperties } = {\n    container: {\n        height:'100%',\n    },\n    wrapper: {\n        marginTop: '2em',\n    }\n}\n\nexport default AttendanceByDay;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { CSSProperties, useEffect, useState } from 'react';\nimport { Card } from '../../../components';\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { AllAttendances } from '../../../api/analytics';\n\ninterface AttendanceRatesRankProps {\n    attendances: AllAttendances | null,\n}\n\nconst AttendanceRatesRank = (props: AttendanceRatesRankProps) => {\n    const initialOptions: any = {\n        title: undefined,\n        chart: {\n            type: \"column\"\n        },\n        xAxis: {\n            type: \"category\"\n        },\n        series: [\n            {\n                name: \"출석률\",\n                colorByPoint: true,\n                data: []\n            },\n            \n        ]\n    };\n    const [chartOptions, setChartOptions] = useState(initialOptions);\n\n    useEffect(() => {\n        if (props.attendances && props.attendances.data) {\n            let rates: any = [];\n            let all_rates = 0;\n            let count = 0;\n            if(props.attendances.data.length > 10){ props.attendances.data.slice(0,9); }\n            props.attendances.data.forEach(attendance=>{\n                rates.push({\n                    name : attendance.info.name !== null ? attendance.info.name : attendance.info.login,\n                    y : attendance.attendances_rate\n                });\n                all_rates += parseFloat(attendance.attendances_rate.toString());\n                count += 1;\n            });\n            all_rates = all_rates / count;\n            const options = {...initialOptions};\n            options.series[0].data = rates;\n            options.series.push({\n                name : '전체 평균',\n                type : 'line',\n                data : (()=>{\n                    let array = [];\n                    for(let i= 0 ; i < count ; i++){\n                        array.push({y : all_rates})\n                    }\n                    return array;\n                })()\n            });\n            setChartOptions(options);\n        }\n        else {\n            setChartOptions(initialOptions);\n        }\n        return () => {\n            setChartOptions(initialOptions);\n        }\n    }, [props.attendances]);\n\n    return (<div style={styles.container}>\n        <Card title=\"정원사 참여율\" desc=\"높은 참여율을 보이는 정원사분들입니다\">\n            {/* CARD BODY */}\n            <div style={styles.wrapper}>\n                <HighchartsReact\n                    highcharts={Highcharts}\n                    options={chartOptions}\n                />\n            </div>\n        </Card>\n    </div>);\n}\n\nconst styles: { [name: string]: CSSProperties } = {\n    container: {\n        height: '100%',\n    },\n    wrapper: {\n        marginTop: '2em',\n    }\n}\n\nexport default AttendanceRatesRank;","import React, { CSSProperties, useState, useEffect } from 'react';\nimport { Card } from '../../../components';\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { Languages } from '../../../api/analytics';\n\ninterface LanguageUsageProps {\n    loading: boolean,\n    error: Error | null,\n    languages: Languages | null,\n}\n\nconst LanguageUsage = (props: LanguageUsageProps) => {\n    const initialOptions = {\n        title: undefined,\n        chart: {\n            type: \"pie\",\n        },\n        series: [\n            {\n                name: \"점유율\",\n                colorByPoint: true,\n                data: []\n            }\n        ]\n    };\n    const [chartOptions, setChartOptions] = useState(initialOptions);\n\n    useEffect(() => {\n        // effect\n        if (props.languages && props.languages.data) {\n            let data: any = [];\n            props.languages.data.forEach(language => {\n                data.push({\n                    name: language._id.language_name,\n                    y: language.rate_percentage,\n                });\n            });\n            const options = { ...initialOptions };\n            options.series[0].data = data;\n            setChartOptions(options);\n        }\n        else {\n            setChartOptions(initialOptions);\n        }\n        return () => {\n            setChartOptions(initialOptions);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props]);\n\n    return (<div style={styles.container}>\n        <Card title=\"사용된 언어\" desc=\"정원사분들이 사용하는 언어를 보여줍니다\">\n            {/* CARD BODY */}\n            <div style={styles.wrapper}>\n                <HighchartsReact\n                    highcharts={Highcharts}\n                    options={chartOptions}\n                />\n            </div>\n        </Card>\n    </div>);\n}\n\nconst styles: { [name: string]: CSSProperties } = {\n    container: {\n        height: \"100%\",\n    },\n    wrapper: {\n        marginTop: '2em',\n    }\n}\n\nexport default LanguageUsage;","import React, { CSSProperties, useEffect, useState } from 'react';\nimport { Card } from '../../../components';\nimport Colors from '../../../components/Colors.json';\nimport { PopularRepository } from '../../../api/analytics';\n\ninterface PopularRepositoryProps {\n    repo: PopularRepository | null,\n}\n\nconst PopularRepositoryInfo = (props: PopularRepositoryProps) => {\n    const [ owner, setOwner ] = useState(\"\");\n    const [ repoName, setRepoName ] = useState(\"\");\n    const [ languageCnt, setLanguageCnt ] = useState(0);\n    useEffect(()=>{\n        if(props.repo !== null){\n            const name = props.repo.data.repo.name.split(\"/\");\n            setOwner(name[0] + \"/\");\n            setRepoName(name[1]);\n            setLanguageCnt(props.repo.data.repo.languages.length);\n        }\n    },[props, props.repo]);\n\n    return (<div style={styles.container}>\n        <Card title=\"가장 힙한 저장소😎\" desc=\"가장 많은 정원사님들이 참여중인 저장소입니다\">\n            <div style={styles.wrapper}>\n                <div style={itemStyles.container}>\n                    <p style={{ ...itemStyles.text, ...itemStyles.owner }}>{ owner }</p>\n                    <p style={{ ...itemStyles.text, ...itemStyles.title }}>{ repoName }</p>\n                    <p style={{ ...itemStyles.text, ...itemStyles.owner }}>{props.repo?.data.repo.description}</p>\n                    <div style={itemStyles.factorContainer}>\n                        <div style={itemStyles.factorItemContainer}>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorTitle }}>{props.repo?.data.commit_cnt}</p>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorDesc }}>커밋</p>\n                        </div>\n                        <div style={itemStyles.factorItemContainer}>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorTitle }}>{props.repo?.data.repo.contributor.length}</p>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorDesc }}>참여자</p>\n                        </div>\n                        <div style={itemStyles.factorItemContainer}>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorTitle }}>{ languageCnt }</p>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorDesc }}>사용된 언어</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </Card>\n    </div>);\n}\n\nconst styles: { [name: string]: CSSProperties } = {\n    container: {\n        // height:'100%',\n    },\n    wrapper: {\n        // marginTop: '1em',\n\n    }\n}\n\nconst itemStyles: { [name: string]: CSSProperties } = {\n    text: {\n        margin: 0,\n        padding: 0,\n        color: '#fff',\n    },\n    title: {\n        fontSize: '1.3em',\n        fontWeight: 600,\n    },\n    desc: {\n        fontSize: '.9em',\n    },\n    owner: {\n        fontSize: '.7em',\n    },\n    container: {\n        backgroundColor: \"#27ae60\",\n        minHeight: '100px',\n        borderRadius: '10px',\n        padding: '12px 25px',\n        // width:'30%',\n        marginBottom: '10px',\n        boxShadow: \"2px 2px 3px 0px\" + Colors.shadow,\n    },\n    factorContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    factorItemContainer: {\n        flex: 6,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    factorTitle: {\n        fontWeight: 800,\n        fontSize: '2.5em',\n    },\n    factorDesc: {\n        fontSize: '.8em',\n    }\n}\n\nexport default PopularRepositoryInfo;","import React, { CSSProperties } from 'react';\nimport { Card } from '../../../components';\nimport { UsersInfo } from '../../../api/user';\nimport UserInfoInterface from '../../../api/interfaces/UserInfo';\nimport { Link } from 'react-router-dom';\n\ninterface AttendentListProps {\n    users: UsersInfo | null,\n}\nconst avatar_size = 60;\nconst index = (props: AttendentListProps) => {\n    \n    const getUserAvatarUrl = (user:UserInfoInterface) =>{\n        if(user.avartar_url && user.avartar_url !== \"\"){\n            return user.avartar_url;\n        }\n        else{\n            return `https://avatars1.githubusercontent.com/u/${user.id}?s=${avatar_size * 2}`;\n        }\n    }\n    return (\n        <Card title=\"참여중인 정원사들\" desc=\"현재 정원사 프로젝트에 참여중인 정원사분들입니다\">\n            {/* 전체 감싸기 */}\n            <div style={styles.wrapper}>\n                {\n                    (() => {\n                        if (props.users && props.users.data) {\n                            return props.users.data.map(user => {\n                                return (<div key={ user.id.toString() } style={styles.itemContainer}>\n                                    <div style={styles.avatarWrapper}>\n                                        {/* 아이콘 */}\n                                        <img style={ styles.avatar } src={ getUserAvatarUrl(user).toString() } alt={ user.login + \" github avatar image\" }/>\n                                    </div>\n                                    <div style={styles.descWrapper}>\n                                        {/* 설명부 */}\n                                        <p style={styles.username}>{user.name}</p>\n                                        <p style={styles.displayName}>{user.login}</p>\n                                    </div>\n                                    <div style={styles.linkWrapper}>\n                                        {/* <a style={styles.link} target=\"_blank\" rel=\"noopener noreferrer\" href={user.html_url.toString()}>보기</a> */}\n                                        <Link style={ styles.link } to={ `/users/${user.login}` }>보기</Link>\n                                    </div>\n                                </div>)\n                            });\n                        } else {\n                            return <div>\n                                <p>등록된 사용자가 없습니다</p>\n                            </div>;\n                        }\n\n                    })()\n                }\n            </div>\n        </Card>\n    );\n}\n\nconst styles: { [name: string]: CSSProperties } = {\n    wrapper: {\n        height: '440px',\n        overflowY: 'auto',\n        marginBottom: '20px',\n    },\n    itemContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginBottom: '15px',\n        borderBottom: '1px solid rgba(0,0,0,.1)',\n        paddingBottom: '15px',\n    },\n    avatarWrapper: {\n        // flex: 1,\n        display:\"flex\",\n        width:`${avatar_size}px`,\n        height:`${avatar_size}px`,\n        justifyContent:'center',\n        alignContent:'center',\n        overflow:'hidden',\n        borderRadius:'50%',\n        boxShadow: '1px 1px 3px rgba(0,0,0,0.2)'\n    },\n    avatar:{\n        width:`${avatar_size}px`,\n        height:`${avatar_size}px`,\n    },\n    username: {\n        fontSize: '1.3em',\n        margin: 0,\n        padding: 0,\n        color: \"#fff\",\n    },\n    displayName: {\n        fontSize: '.8em',\n        margin: 0,\n        padding: 0,\n        color: \"#fff\",\n    },\n    descWrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        padding: '0 10px',\n        flex: 3,\n    },\n    linkWrapper: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flex: 1,\n    },\n    link: {\n        textDecoration: 'none',\n        fontSize: '.9em',\n        color: 'white',\n        padding: '5px 15px',\n        backgroundColor: '#27ae60',\n        height: 'fit-content',\n        borderRadius: '5px',\n        boxShadow: '1px 1px 3px rgba(0,0,0,0.2)'\n    }\n}\n\nexport default index;","import React, { CSSProperties, useState, useEffect } from 'react';\nimport { Card } from '../../../components';\nimport Colors from '../../../components/Colors.json';\nimport { HottestRepository } from '../../../api/analytics';\n\ninterface HottestRepostoryProps {\n    repo: HottestRepository | null,\n}\n\nconst HottestRepositoryInfo = (props: HottestRepostoryProps) => {\n    const [owner, setOwner] = useState(\"\");\n    const [repoName, setRepoName] = useState(\"\");\n    const [languageCnt, setLanguageCnt] = useState(0);\n    useEffect(() => {\n        console.log(props.repo);\n        if (props.repo !== null) {\n            const name = props.repo.data.repo.name.split(\"/\");\n            \n            setOwner(name[0] + \"/\");\n            setRepoName(name[1]);\n            setLanguageCnt(props.repo.data.repo.languages.length);\n        }\n    }, [props, props.repo]);\n    return (<div style={styles.container}>\n        <Card title=\"가장 바쁜 저장소🔥\" desc=\"최근 가장 커밋이 많은 저장소입니다\">\n            <div style={styles.wrapper}>\n                <div style={itemStyles.container}>\n                    <p style={{ ...itemStyles.text, ...itemStyles.owner }}>{owner}</p>\n                    <p style={{ ...itemStyles.text, ...itemStyles.title }}>{repoName}</p>\n                    <p style={{ ...itemStyles.text, ...itemStyles.owner }}>{props.repo?.data.repo.description}</p>\n                    <div style={itemStyles.factorContainer}>\n                        <div style={itemStyles.factorItemContainer}>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorTitle }}>{props.repo?.data.commit_cnt}</p>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorDesc }}>커밋</p>\n                        </div>\n                        <div style={itemStyles.factorItemContainer}>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorTitle }}>{props.repo?.data.repo.contributor.length}</p>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorDesc }}>참여자</p>\n                        </div>\n                        <div style={itemStyles.factorItemContainer}>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorTitle }}>{languageCnt}</p>\n                            <p style={{ ...itemStyles.text, ...itemStyles.factorDesc }}>사용된 언어</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </Card>\n    </div>);\n}\n\nconst styles: { [name: string]: CSSProperties } = {\n    container: {\n        // height:'100%',\n    },\n    wrapper: {\n        // marginTop: '1em',\n    }\n}\n\nconst itemStyles: { [name: string]: CSSProperties } = {\n    text: {\n        margin: 0,\n        padding: 0,\n        color: '#fff',\n    },\n    title: {\n        fontSize: '1.3em',\n        fontWeight: 600,\n    },\n    desc: {\n        fontSize: '.9em',\n    },\n    owner: {\n        fontSize: '.7em',\n    },\n    container: {\n        backgroundColor: Colors.blue,\n        minHeight: '100px',\n        borderRadius: '10px',\n        padding: '12px 25px',\n        // width:'30%',\n        marginBottom: '10px',\n        boxShadow: \"2px 2px 3px 0px\" + Colors.shadow,\n    },\n    factorContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    factorItemContainer: {\n        flex: 6,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n\n    },\n    factorTitle: {\n        fontWeight: 800,\n        fontSize: '2.5em',\n    },\n    factorDesc: {\n        fontSize: '.8em',\n    }\n}\n\nexport default HottestRepositoryInfo;","import React, { CSSProperties, useState, useEffect } from 'react';\nimport moment from 'moment';\nimport './animations.scss';\nimport { Card } from '../../../components';\nimport Colors from '../../../components/Colors.json';\nimport { AllAttendances } from '../../../api/analytics';\n\ninterface AllAttendanceChartProps {\n    attendances: AllAttendances | null,\n}\n\nconst AllAttendanceChart = (props: AllAttendanceChartProps) => {\n    let initialDates: moment.Moment[] = [];\n    const [displayDates, setDisplayDates] = useState(initialDates);\n\n    useEffect(() => {\n        if(props.attendances){\n            let newDates: moment.Moment[] = [];\n            Object.keys(props.attendances.data[0].attendances).forEach(key=>{\n                newDates.push(moment(key));\n            });\n            setDisplayDates(newDates);\n        }\n    }, [props.attendances]);\n\n    const getDateFormat = (date:moment.Moment)=>{\n        return date.format(\"MM/DD\");\n    }\n\n    const getRank = (rank:number)=>{\n        if(rank === 1){ return '🏅'; }\n        else if(rank === 2){ return '🥈'; }\n        else if(rank === 3){ return '🥉'; }\n        else { return rank; }\n    }\n    \n    return (<Card title=\"출석부\" desc=\"오늘까지 진행된 모든 진행상황을 봅니다\">\n        <div style={styles.container}>\n            <div style={styles.headerWrapper}>\n                <table style={styles.headerTable}>\n                    <thead>\n                        <tr >\n                            <th style={{ ...styles.headerTitleEssential, width: '50px' }}>순위</th>\n                            <th style={{ ...styles.headerTitleEssential, width: '200px' }}>정원사</th>\n                            <th style={{ ...styles.headerTitleEssential, width: '100px' }}>출석률</th>\n                            {\n                                displayDates.map((item, idx) => {\n                                    if (moment.isMoment(item)) {\n                                        return <th key={idx.toString()} style={styles.headerTitle}>{getDateFormat(item)}</th>\n                                    }\n                                    else { return <></>; }\n                                })\n                            }\n                        </tr>\n                    </thead>\n                </table>\n            </div>\n            <div style={styles.contentWrapper}>\n                <table className=\"attendenceChartBody\" style={styles.headerTable}>\n                    <tbody>\n                        {\n                            props.attendances ? props.attendances.data.map((attendance, idx) =>{    \n                                return (\n                                    <tr key={attendance.info.id.toString()}>\n                                        <td style={{ ...styles.column, ...styles.columnEssential, width: '50px' }}>{getRank(idx + 1)}</td>\n                                        <td style={{ ...styles.column, ...styles.columnEssential, width: '200px' }}>{attendance.info.name !== null ? attendance.info.name : attendance.info.login}</td>\n                                        <td style={{ ...styles.column, ...styles.columnEssential, width: '100px' }}>{attendance.attendances_rate.toFixed(2) + \"%\"}</td>\n                                        {\n                                            Object.keys(attendance.attendances).map(key=>{\n                                                return <td style={styles.column} key={key}>{ attendance.attendances[key] > 0 ? '⭐️' : '-' }</td>\n                                            })\n                                        }\n                                    </tr>\n                                );\n                            }) : \"\"\n                        }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </Card>);\n}\n\nconst styles: { [name: string]: CSSProperties } = {\n    container: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n\n        overflowX: 'auto',\n        width: '100%',\n        maxHeight: '400px',\n        overflowY: 'auto',\n        marginBottom:'10px',\n    },\n    headerWrapper: {\n        width: 'fit-content',\n    },\n    headerTable: {\n        width: 'max-content',\n        borderCollapse: 'collapse',\n        border: '1px solid' + Colors.table.border,\n    },\n    headerTitleEssential: {\n        width: '100px',\n        fontWeight: 800,\n        color: '#fff',\n        border: '1px solid' + Colors.table.border,\n    },\n    headerTitle: {\n        width: '50px',\n        fontWeight: 400,\n        color: '#fff',\n        border: '1px solid' + Colors.table.border,\n    },\n    contentWrapper: {\n        marginBottom: '20px',\n        width: 'fit-content',\n    },\n    column: {\n        width: '50px',\n        fontWeight: 400,\n        color: '#fff',\n        border: '1px solid' + Colors.table.border,\n        textAlign: 'center',\n    }\n};\n\nexport default AllAttendanceChart;","import React, { CSSProperties, useEffect } from 'react'\nimport \"./MainScene.scss\";\nimport './highcharts-additional.scss';\n\nimport Jumbotron from './Jumbotron';\n\nimport AttendanceByDay from './AttendanceByDay';\nimport AttendanceRatesRank from './AttendanceRatesRank';\nimport LanguageUsage from './LanguageUsage';\nimport PopularRepositories from './PopularRepositories';\nimport AttendentList from './AttendentList';\nimport HottestRepository from './HottestRepository';\nimport AllAttendanceChart from './AllAttendanceChart';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    getSummaryThunk,\n    getAllAttendancesThunk,\n    getLanguagesPopularityThunk,\n    getHottestRepositoryThunk,\n    getPopularRepositoryThunk,\n    getAllAttendancesByDatesThunk,\n}\n    from '../../modules/analytics';\nimport { getUsersParticipatedLatestChallengeThunk } from '../../modules/user';\nimport { RootState } from '../../modules';\n\nconst MainScene = (props: any) => {\n    const { summary, all_attendances, languages , popular_repo , hottest_repo, all_attendances_by_dates } = useSelector((state: RootState) => state.analytics);\n    const { users_participated_latest_challenge } = useSelector((state: RootState) => state.user);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getSummaryThunk());\n        dispatch(getAllAttendancesThunk());\n        dispatch(getLanguagesPopularityThunk());\n        dispatch(getUsersParticipatedLatestChallengeThunk());\n        dispatch(getHottestRepositoryThunk());\n        dispatch(getPopularRepositoryThunk());\n        dispatch(getAllAttendancesByDatesThunk());\n    }, [dispatch]);\n\n    return (\n        <div className=\"contents\">\n            <div className=\"header\">\n                <h1>\n                    안녕하세요! <b>정원사 프로젝트</b>입니다!\n                </h1>\n            </div>\n            <Jumbotron summary={summary.data} error={summary.error} loading={summary.loading} />\n            {/* 영역을 둘로 나눔 */}\n            <div className=\"flex-2 mt\">\n                <div className=\"flex-item\">\n                    <AttendanceRatesRank attendances={all_attendances.data} />\n                </div>\n                <div className=\"flex-item\">\n                    <AttendanceByDay attendances={ all_attendances_by_dates.data }/>\n                </div>\n            </div>\n            {/* 영역을 셋으로 나눔 */}\n            <div className=\"flex-3 mt\">\n                <div className=\"flex-item\">\n                    <LanguageUsage languages={languages.data} error={languages.error} loading={languages.loading} />\n                </div>\n                <div className=\"flex-item\" style={styles.columns}>\n                    <PopularRepositories repo={popular_repo.data} />\n                    <HottestRepository repo={hottest_repo.data} />\n                </div>\n                <div className=\"flex-item\" style={{ flex: 3 }}>\n                    <AttendentList users={users_participated_latest_challenge.data} />\n                </div>\n            </div>\n            <div className=\"mt\">\n                <AllAttendanceChart attendances={all_attendances.data} />\n            </div>\n        </div>\n    );\n}\n\nconst styles: { [name: string]: React.CSSProperties } = {\n    columns: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        flexDirection: 'column',\n        // height: '100%',\n    }\n}\n\nexport default MainScene;","import React from 'react';\n\nimport { MdDashboard, MdSettings, MdInfo, MdFace,MdQueue } from 'react-icons/md';\nimport { FaGithub } from 'react-icons/fa';\nimport Logo from \"../Logo\";\nimport './SideMenu.scss';\nimport { NavLink } from 'react-router-dom';\n\nimport project_info from '../../../package.json';\n\nconst index = () => {\n    return (\n        <div className=\"sidemenu\">\n            <a className=\"logo\" href=\"/\">\n                <Logo width={ 45 } height={45}/>\n            </a>\n            {/* 버튼 위치 */}\n            <ul className=\"menu\">\n                <li >\n                    <NavLink exact={true} activeClassName=\"active\" to=\"/\">\n                        <MdDashboard />\n                    </NavLink>\n                </li>\n\n                <li>\n                    <NavLink activeClassName=\"active\" to=\"/users\">\n                        <MdFace />\n                    </NavLink>\n                </li>\n\n                <li>\n                    <NavLink activeClassName=\"active\" to=\"/register\">\n                        <MdQueue />\n                    </NavLink>\n                </li>\n            </ul>\n            <ul className=\"config\">\n                <li>\n                    <NavLink activeClassName=\"active\" to=\"/info\">\n                        <MdInfo />\n                    </NavLink>\n                </li>\n                <li>\n                    <a href={ project_info.repository.url } target=\"_blank\" rel=\"noopener noreferrer\"><FaGithub /></a>\n                </li>\n                <li>\n                    <NavLink activeClassName=\"active\" to=\"/settings\">\n                        <MdSettings />\n                    </NavLink>\n                </li>\n            </ul>\n        </div>\n    );\n}\n\nexport default index;   ","import UserInfoInterface from '../api/interfaces/UserInfo';\n\nexport const config = {\n    avatar : {\n        size : 150,\n    },\n    url : {\n        LINK : \"LINK\",\n        EMAIL : \"EMAIL\",\n    }\n}\nexport const getAvatarURL = (user:UserInfoInterface | null | undefined, size?: number | null | undefined): string | undefined=> {\n    if(user){\n        if(user.avartar_url && user.avartar_url !== \"\"){\n            return user.avartar_url.toString();\n        }\n        else{\n            const _avatar_size = size || config.avatar.size;\n            return `https://avatars1.githubusercontent.com/u/${user.id}?s=${_avatar_size * 2}`.toString();\n        }\n    }\n    else{\n        return undefined;\n    }\n}\n\nexport const getURL = (url : string, type?:string)=>{\n    type = type || config.url.LINK;\n    let result = \"\";\n    switch(type){\n        case config.url.LINK:\n            if(url.toLowerCase().indexOf(\"://\") < 0){\n                // 프로토콜 형태가 존재하지 않는 경우\n                result = \"http://\" + url;\n            }\n            else{ result = url; }\n            break;\n        case config.url.EMAIL:\n            result = \"mailto://\" + url\n            break;\n        default: \n            result = url;\n            break;\n    }\n    return result;\n}\n\nexport const getUserName = (login : string | String, name: string | String | undefined)=>{\n    if(name && name.trim() !== \"\"){\n        return name;\n    }\n    else{\n        return login;\n    }\n}","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { RootState } from '../../../modules';\nimport * as UserAPI from '../../../api/user';\nimport { clearUserInfoThunk, getUsersInfoThunk, getUserInfoThunk } from '../../../modules/user';\n\nimport { MdDeleteForever, MdRefresh } from 'react-icons/md';\nimport { AiOutlineLoading } from 'react-icons/ai';\n\nconst UserDetailFooter = () => {\n    const { data } = useSelector((state: RootState) => state.user.user);\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const [fetchLoading, setFetchLoading] = useState(false);\n    const [deleteLoading, setDeleteLoading] = useState(false);\n    const fn = {\n        delete: async () => {\n            if(deleteLoading){ window.alert(\"삭제 중입니다\"); return; }\n            if(fetchLoading){ window.alert(\"데이터 갱신 중입니다\"); return; }\n            if (window.confirm(\"모든 활동 내역이 삭제됩니다. 정말로 모두 삭제할까요?\")) {\n                if (data && data.data) {\n                    setDeleteLoading(true);\n                    const result = await UserAPI.deleteUser(data.data.login.toString());\n                    setDeleteLoading(false);\n                    if (result.code > 0) {\n                        dispatch(clearUserInfoThunk());\n                        dispatch(getUsersInfoThunk());\n                        history.push(\"/users\");\n                    }\n                    else {\n                        window.alert(\"오류가 발생했습니다.\");\n                    }\n                }\n            }\n        },\n        fetch: async () => {\n            if(fetchLoading){ window.alert(\"불러오는 중입니다\"); return; }\n            if(deleteLoading){ window.alert(\"삭제 처리 중입니다\"); return; }\n            if (window.confirm(\"사용자님의 정보를 갱신할까요?\")) {\n                if (data && data.data) {\n                    \n                    setFetchLoading(true);\n                    const result = await UserAPI.fetchUserInfo(data.data.login.toString());\n                    setFetchLoading(false);\n                    if (result.code > 0) {\n                        dispatch(getUserInfoThunk(data.data.login.toString()));\n                    }\n                }\n            }\n        }\n    }\n    // 가져오기 \n    return (<div className=\"header-content-footer\">\n        <button type=\"button\" className=\"btn fetch\" onClick={fn.fetch} >\n            {\n                !fetchLoading ?\n                    <> <MdRefresh /> <p>사용자 정보 갱신</p></> :\n                    <> <AiOutlineLoading className=\"indicator\" /></>\n            }\n        </button>\n        <button type=\"button\" className=\"btn remove\" onClick={fn.delete} >\n            {\n                !deleteLoading ?\n                    <><MdDeleteForever /> <p>사용자 삭제</p> </> :\n                    <> <AiOutlineLoading className=\"indicator\" /></>\n            }\n        </button>\n    </div>);\n}\n\nexport default UserDetailFooter;\n","import React from 'react';\nimport * as libGithub from '../../../lib/github';\nimport UserInfoInterface from '../../../api/interfaces/UserInfo';\n\nimport { IoIosLink, IoIosMail } from 'react-icons/io';\n\nimport Footer from './Footer';\n\ninterface UserDetailHeaderProps {\n    user : UserInfoInterface | undefined | null\n}\nconst UserDetailHeader = (props: UserDetailHeaderProps)=>{\n    const ui = {\n        user_name : (user: UserInfoInterface | undefined | null)=>{\n            if(user){\n                if(user.name){\n                    return (<div className=\"user-name\">\n                        <p className=\"title\">\n                            <a className=\"title\" target=\"_blank\" href={ `https://github.com/${user.login}` } rel=\"noopener noreferrer\">{ user.name }</a>\n                        </p>\n                        <p className=\"subtitle\">@{ user.login }</p>\n                    </div>);\n                }\n                else{\n                    return (\n                        <div className=\"user-name\">\n                            <p className=\"title\">\n                                <a className=\"title\" target=\"_blank\" href={ `https://github.com/${user.login}` } rel=\"noopener noreferrer\">{ user.login }</a>\n                            </p>\n                        </div>\n                    );\n                }\n            }\n            else{\n                return <></>;\n            }\n        },\n        bio: (bio:string|String| undefined)=>{\n            if(bio){ \n                return (<div className=\"bio\">\n                    { bio.split('\\n').map( (text, idx)=>{\n                        return (<span key={ idx }>{ text }<br/></span>)\n                    }) }\n                </div>)\n            }\n            else { return <></>; }\n        },\n        link: (data:string | String | undefined)=>{\n            if(data){\n                const _real_url = libGithub.getURL(data.toString(), libGithub.config.url.LINK);\n                return <div className=\"link-wrapper\">\n                    <p className=\"icon\">\n                        <IoIosLink/>\n                    </p>\n                    <a className=\"link\" href={ _real_url } target=\"_blank\" rel=\"noopener noreferrer\">{ data }</a>\n                </div>\n            }\n            else{ return <></>; }\n        },\n        mail: (data:string| String|undefined)=>{\n            if(data){\n                const _real_url = libGithub.getURL(data.toString(), libGithub.config.url.EMAIL);\n                return <div className=\"link-wrapper\">\n                    <p className=\"icon\"><IoIosMail/></p>\n                    <a className=\"link\" href={ _real_url } target=\"_blank\" rel=\"noopener noreferrer\">{ data }</a>\n                </div>\n            }\n            else{ return <></>; }\n        }\n    }\n    return (\n        <div className=\"header-container\">\n            <div className=\"header-content\">\n                <div className=\"avatar-container\">\n                    <img className=\"avatar\" src={ libGithub.getAvatarURL(props.user, 200) }  alt=\"\"/>\n                </div>\n                <div className=\"header-desc\">\n                    { ui.user_name(props.user) }\n                    { ui.bio(props.user?.bio) }\n                    {/* 홈페이지 정보 */}\n                    { ui.link(props.user?.blog) }\n                    {/* 이메일 정보 */}\n                    { ui.mail(props.user?.email) }\n                </div>\n            </div>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default UserDetailHeader;","import React, { useEffect, useState } from 'react';\nimport DatePicker from \"react-datepicker\";\nimport ChallengeInterface from '../../api/interfaces/Challenge';\nimport { deleteChallenge, putChallengeFeatured } from '../../api/challenge';\nimport { getAllChallengesThunk } from '../../modules/challenges';\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport { ChallengeAPI } from '../../api';\n\nenum inputModeEnum { EDIT, ADD, HIDE };\n\ninterface ChallengeDetail {\n    challenge?: ChallengeInterface,\n    mode: inputModeEnum,\n    onCancel: Function,\n}\n\nconst ChallengeDetail = (props: ChallengeDetail) => {\n    const [titleError, setTitleError] = useState(\"\");\n    const [dateError, setDateError] = useState(\"\");\n    const [challengeTitle, setChallengeTitle] = useState(\"\");\n    const [selectedFinishDt, setSelectedFinishDt] = useState(new Date());\n    const [selectedStartDt, setSelectedStartDt] = useState(new Date());\n    const [ isRequested , setIsRequested ] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const ui = {\n        featuredBtn : (challenge : ChallengeInterface| undefined)=>{\n            if(challenge !== undefined){\n                return (\n                    <button className={ \"btn \" + (!challenge.is_featured ? \"featured\" : 'not-featured') } type=\"button\" onClick={ ()=>fn.submit.featured(challenge.id, !challenge.is_featured) }>\n                        { !challenge.is_featured ? '인증 처리' : '미인증 처리'  }\n                    </button>\n                );\n            }\n            else{\n                return (<></>);\n            }\n        }\n    }\n\n    const fn = {\n        init: (challenge?: ChallengeInterface) => {\n            if (challenge) {\n                setSelectedStartDt((moment(challenge.start_dt).toDate()));\n                setSelectedFinishDt((moment(challenge.finish_dt).toDate()));\n                setChallengeTitle(challenge.title);\n            }\n            else {\n                const nowDate = moment();\n                const nextDate = nowDate.clone().add(\"day\", 1);\n                setChallengeTitle(\"\");\n                setSelectedStartDt(nowDate.toDate());\n                setSelectedFinishDt(nextDate.toDate());\n            }\n        },\n        cancel: () => {\n            if (props.onCancel) {\n                // 데이터들 초기화\n                props.onCancel();\n            }\n        },\n        valid: (title: string, start_dt: Date, finish_dt: Date): boolean => {\n            let hasError = false;\n\n            if (title === \"\") {\n                setTitleError(\"제목은 공백일 수 없습니다\");\n                hasError = true;\n            }\n            else if (title.length > 30) {\n                setTitleError(\"제목은 30자를 넘을 수 없습니다\");\n                hasError = true;\n            }\n            else { setTitleError(\"\"); }\n\n            const mStartDt = moment(start_dt);\n            const mFinishDt = moment(finish_dt);\n            const diff = mStartDt.diff(mFinishDt);\n            if (diff > 0) {\n                setDateError(\"시작일은 종료일보다 이전이어야 합니다\");\n                hasError = true;\n            }\n            else if (diff === 0) {\n                setDateError(\"시작일과 종료일은 같을 수 없습니다\");\n                hasError = true;\n            }\n            else {\n                setDateError(\"\");\n            }\n\n            return !hasError;\n        },\n        submit: {\n            add: async (title: string, start_dt: Date, finish_dt: Date) => {\n                if(isRequested){ window.alert(\"요청 중 입니다\"); return; }\n                if (fn.valid(title, start_dt, finish_dt)) {\n                    if(window.confirm(\"도전 기간을 추가할까요?\")){\n                        setIsRequested(true);\n                        const result = await ChallengeAPI.postChallenge({\n                            title: title,\n                            start_dt: start_dt, \n                            finish_dt: finish_dt\n                        });\n                        setIsRequested(false);\n                        if(result.code > 0){\n                            \n                            dispatch(getAllChallengesThunk());\n                            fn.init();\n                            props.onCancel();\n                            window.alert(\"추가되었습니다\");\n                            \n                        }\n                        else{\n                            window.alert(result.message);\n                        }\n                    }\n                }\n            },\n            update: async (challenge_id:string|undefined,title: string, start_dt: Date, finish_dt: Date) => {\n                if(isRequested){ window.alert(\"요청 중 입니다\"); return; }\n                if(challenge_id){\n                    if (fn.valid(title, start_dt, finish_dt)) {\n                        if(window.confirm(\"도전 기간을 수정할까요?\")){\n                            setIsRequested(true);\n                            const result = await ChallengeAPI.putChallenge(challenge_id,{\n                                title: title,\n                                start_dt: start_dt,\n                                finish_dt: finish_dt,\n                            });\n                            setIsRequested(false);\n                            if(result.code > 0){\n                                dispatch(getAllChallengesThunk());\n                                window.alert(\"수정되었습니다\");\n                            }\n                            else{\n                                window.alert(result.message);\n                            }\n                        }\n                    }\n                }\n                else{ window.alert(\"잘못된 요청입니다\"); }\n            },\n            delete : async (challenge_id:string | undefined)=>{\n                if(isRequested){ window.alert(\"요청 중 입니다\"); return; }\n                if(challenge_id){\n                    if(window.confirm(\"해당 도전 기간을 정말 삭제할까요?\")){\n                        setIsRequested(true);\n                        const result = await deleteChallenge(challenge_id);\n                        setIsRequested(false);\n                        if(result.code > 0){\n                            setDateError(\"\");\n                            setTitleError(\"\");\n                            // 삭제됐으니, 선택 취소 처리\n                            dispatch(getAllChallengesThunk());\n                            props.onCancel();\n                        }\n                        else{\n                            window.alert(result.message);\n                        }\n                    }\n                }\n            },\n            featured : async (challenge_id:string | undefined, is_featured : Boolean)=>{\n                if(isRequested){ window.alert('요청 중 입니다');return; }\n                if(challenge_id){\n                    if(window.confirm(is_featured ? '이 요청을 인증 처리 할까요?\\n인증 처리 시, 모든 통계는 해당 프로젝트를 기준으로 합니다' : '이 요청을 미인증 처리할까요?')){\n                        setIsRequested(true);\n                        const result = await putChallengeFeatured(challenge_id, is_featured);\n                        setIsRequested(false);\n                        if(result.code > 0){\n                            setDateError(\"\");\n                            setTitleError(\"\");\n                            // 삭제됐으니, 선택 취소 처리\n                            dispatch(getAllChallengesThunk());\n                            if(is_featured){\n                                window.alert('이제 해당 프로젝트가 메인 정원사 프로젝트가 됩니다. 모든 통계는 해당 프로젝트를 기준으로 합니다');\n                            }\n                        }\n                        else{\n                            window.alert(result.error.message || `오류가 발생했습니다 : \\n${result.error}`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (props.challenge) {\n            setDateError(\"\");\n            setTitleError(\"\");\n            setChallengeTitle(props.challenge.title);\n            setSelectedStartDt((moment(props.challenge.start_dt).toDate()));\n            setSelectedFinishDt((moment(props.challenge.finish_dt).toDate()));\n        }\n        else {\n            const nowDate = moment();\n            const nextDate = nowDate.clone().add(\"day\", 1);\n            setDateError(\"\");\n            setTitleError(\"\");\n            setChallengeTitle(\"\");\n            setSelectedStartDt(nowDate.toDate());\n            setSelectedFinishDt(nextDate.toDate());\n        }\n    }, [props, props.challenge]);\n\n    if (props.mode === inputModeEnum.HIDE) {\n        return <div className=\"challenge-info-container\">\n            <div className=\"info\">\n                <p className=\"title\">선택된 도전 기간이 없습니다</p>\n                <p className=\"desc\">수정할 도전 기간을 선택하거나, 새로운 도전 기간을 추가해보세요</p>\n            </div>\n        </div>;\n    }\n    else {\n        return (\n            <div className=\"challenge-info-container\">\n                <h2>도전 기간\n                    {props.mode === inputModeEnum.ADD ? \" 추가\" : \" 상세 보기\"}\n                </h2>\n                <div className=\"detail-container\">\n                    <div className=\"title-container\">\n                        <div className=\"info\">\n                            <span className=\"name\">도전 기간 제목</span>\n                            {\n                                titleError ? <span className=\"error\">{titleError}</span> : <></>\n                            }\n                        </div>\n                        <input type=\"text\" className=\"input\" value={challengeTitle} onChange={e => { setChallengeTitle(e.target.value) }} />\n                    </div>\n                    <div className=\"dates-container\">\n                        <div className=\"date-container\">\n                            <div className=\"info\">\n                                <span className=\"name\">도전 시작 일자</span>\n                                {\n                                    dateError ? <span className=\"error\">{dateError}</span> : <></>\n                                }\n                            </div>\n                            <DatePicker\n                                selected={selectedStartDt}\n                                onChange={date => { if (date) { setSelectedStartDt(date) } }}\n                                className=\"input\"\n                            />\n                        </div>\n                        <div className=\"date-container\">\n                            <div className=\"info\">\n                                <span className=\"name\">도전 종료 일자</span>\n                                {\n                                    dateError ? <span className=\"error\">{dateError}</span> : <></>\n                                }\n                            </div>\n\n                            <DatePicker\n                                selected={selectedFinishDt}\n                                onChange={date => { if (date) { setSelectedFinishDt(date) } }}\n                                className=\"input\"\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"btns-container\">\n                    {\n                        props.mode === inputModeEnum.EDIT ?\n                            <>\n                                { ui.featuredBtn(props.challenge) }\n                                <button\n                                    className=\"btn add\"\n                                    onClick={\n                                        () => {\n                                            fn.submit.update(props.challenge?.id, challengeTitle, selectedStartDt, selectedFinishDt)\n                                        }\n                                    }>\n                                    수정\n                                </button>\n                                <button className=\"btn delete\" onClick={()=>{fn.submit.delete(props.challenge?.id)}}>\n                                    삭제\n                                </button>\n                            </> :\n                            <button\n                                className=\"btn add\"\n                                onClick={\n                                    () => {\n                                        fn.submit.add(challengeTitle, selectedStartDt, selectedFinishDt)\n                                    }\n                                }>\n                                추가\n                        </button>\n                    }\n                    <button className=\"btn cancel\" onClick={fn.cancel}>\n                        취소\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ChallengeDetail;","import React from 'react';\nimport ParticipatedChallengeItem from './ParticipatedChallengeItem';\nimport ChallengeInterface from '../../../api/interfaces/Challenge';\ninterface ParticipatedChallengeListPropsInterface \n{\n    user_challenges?: [ChallengeInterface],\n}\n\nconst ParticipatedChallengeList = (props:ParticipatedChallengeListPropsInterface) => {\n\n    if(props.user_challenges){\n        return (<div className=\"card-list\">\n            {\n                props.user_challenges.map((item, key)=>{\n                    return <ParticipatedChallengeItem key={ key } data={ item }/>\n                \n                })\n            }\n        </div>);\n    }\n    else{\n        return (\n            <></>\n        );\n    }\n}\n\nexport default ParticipatedChallengeList;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { LatestChallengeAttendancesByUserReponse } from '../../../api/analytics';\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport moment from 'moment';\nimport './LatestAttendanceChart.scss';\n\ninterface LatestAttendanceChartProps {\n    data: LatestChallengeAttendancesByUserReponse | null\n}\n\nconst LatestAttendanceChart = (props: LatestAttendanceChartProps) => {\n    const initialOptions:any = {\n        title: undefined,\n        chart:{\n            type: \"line\",\n        },\n        xAxis:{\n            type:\"category\",\n        },\n        series:[{\n            name : \"커밋 수\",\n            data : [],\n        }]\n    };\n    const [ chartOptions, setChartOptions ] = useState();\n    useEffect(()=>{\n        if(props.data && props.data.code > 0 && props.data.data.length > 0){\n            // 데이터 있음 \n            let _series = [];\n            for(let [date, commits] of Object.entries(props.data.data[0].attendances)){\n                _series.push({\n                    name : moment(date).format(\"MM/DD\"),\n                    y : commits\n                });\n            }\n            let _options = { ...initialOptions };\n            _options.series[0].data = _series;\n            setChartOptions(_options);\n        }\n\n        return ()=>{\n            setChartOptions(initialOptions);\n        }\n    },[props.data]);\n    if (null) {\n        return (\n            <div className=\"attendance-chart-container\">\n                <div className=\"chart-alt\">\n                    <p className=\"chart-alt-text\">데이터 없음</p>\n                    <p className=\"chart-alt-desc\">사용자 정보 갱신 후 새로 고침해주세요</p>\n                </div>\n            </div>\n        )\n    }\n    else{\n        return (\n            <div className=\"attendance-chart-container\">\n                <HighchartsReact\n                    highcharts={ Highcharts }\n                    options={ chartOptions }\n                />\n            </div>\n        );\n    }\n    \n}\n\nexport default LatestAttendanceChart;","import React, { useState, useEffect } from 'react';\nimport { RepositoryWithUser, RepositoryLanguage } from '../../../api/interfaces/Repository';\nimport * as GithubLib from '../../../lib/github';\nimport { useHistory } from 'react-router';\nconst LanguageColors = require(\"language-colors\");\ninterface ContributedRepoItemProps {\n    data: RepositoryWithUser\n};\n\nconst ContributedRepoItem = (props: ContributedRepoItemProps) => {\n    const [repoName, setRepoName] = useState(\"\");\n    const [repoOwner, setRepoOwner] = useState(\"\");\n    const [numOfLanguages, setNumOfLanguages] = useState(0);\n    const history = useHistory();\n    useEffect(() => {\n        const splited_repo_name = props.data.name.split(\"/\");\n        setRepoOwner(splited_repo_name[0] + \"/\");\n        setRepoName(splited_repo_name[1]);\n        let _counts = 0;\n        props.data.languages.forEach(item => {\n            _counts += item.rate;\n        });\n        setNumOfLanguages(_counts);\n    }, [props.data]);\n\n    const ui = {\n        lanColorStyle: (name: string) => {\n            let current_rgb = LanguageColors[name.toLowerCase()];\n            if (name.toLowerCase() === \"c++\") { current_rgb = LanguageColors['cpp']; }\n            if (current_rgb) {\n                return { backgroundColor: current_rgb };\n            }\n            else { return {} }\n        },\n        lanPercentage: (rate: number, count: number) => {\n            const percentage = ((rate / count) * 100).toFixed(2);\n            return `${percentage}%`;\n        },\n        lanPercentageBar: (languages: [RepositoryLanguage], count: number) => {\n            let gradient_items: any = [];\n            let counts = 0;\n            let current_percentage = languages.length <= 1 ? 100 : 0;\n            languages.forEach(item => { counts += item.rate });\n\n            languages.forEach(item => {\n                if(item.name.toLowerCase() === \"c++\"){ item.name = \"cpp\"; }\n                let _color = LanguageColors[item.name.toLowerCase()];\n                if (!_color) { _color = [92, 102, 128]; }\n                else { _color = LanguageColors[item.name.toLocaleLowerCase()].color; }\n                gradient_items.push(\n                    `rgba(${_color[0]},${_color[1]},${_color[2]},1) ${current_percentage}%`\n                );\n                current_percentage += ((item.rate / counts) * 100);\n            });\n\n            // 없으면 오류\n            if (gradient_items.length === 1) {\n                gradient_items.push(\n                    gradient_items[0]\n                );\n            }\n\n            let _style: any = {\n                background: `linear-gradient(90deg , ${gradient_items.join(\",\")})`\n            }\n\n            return (\n                <div className=\"languages-percentage-bar\" style={_style}></div>\n            );\n        },\n        lanPercentageBarStack: (languages: [RepositoryLanguage], count: number) => {\n            return (\n                <div className=\"languages-percentage-bar\" >\n                    {languages.map(item => {\n                        const _styles : any = {\n                            width : ui.lanPercentage(item.rate, count),\n                            ...ui.lanColorStyle(item.name),\n                        }\n                        return <span key={item.name} className=\"language-percentage\" style={_styles}></span>\n                    })}\n                </div>\n            )\n        }\n    }\n\n    const fn = {\n        move: (name:String)=>{\n            history.push(\n                `/users/${name}`\n            )\n        }\n    }\n\n    return (\n        <div className=\"repo-item\">\n            <div className=\"header\">\n                <p className=\"sub-title\">{repoOwner}</p>\n                <a className=\"title\" href={`https://github.com/${props.data.name}`} target=\"_blank\" rel=\"noopener noreferrer\">{repoName}</a>\n                <p className=\"desc\">{ props.data.description }</p>\n                <div className=\"languages\">\n                    {\n                        props.data.languages.map((item, key) => {\n                            return (<div key={key} className=\"language\">\n                                <span className=\"color\" style={{ ...ui.lanColorStyle(item.name) }}></span>\n                                <p className=\"name\">{item.name}</p>\n                                <p className=\"percentage\">{ui.lanPercentage(item.rate, numOfLanguages)}</p>\n                            </div>);\n                        })\n                    }\n                </div>\n                {\n                    ui.lanPercentageBar(props.data.languages, numOfLanguages)\n                }\n            </div>\n            <div className=\"content\">\n                <h3 className=\"title\">참여한 정원사들</h3>\n                <div className=\"users\">\n\n                    {\n                        props.data.contributor.map(item => {\n                            return (\n                                <div key={item.login.toString()} className=\"user\" onClick={()=>fn.move(item.login)}>\n                                    <div className=\"avatar\">\n                                        <img src={GithubLib.getAvatarURL(item, 100)} alt=\"깃허브 이미지\" />\n                                    </div>\n                                    <p className=\"name\">\n                                        {GithubLib.getUserName(item.login, item.name)}\n                                    </p>\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </div>\n        </div>\n    );\n}\nexport default ContributedRepoItem;","import React from 'react';\n\nimport './ContributedReposList.scss';\nimport { RepositoriesByUserResponse } from '../../../api/repo';\nimport ContributedRepoItem from './ContributedRepoItem';\n\ninterface ContributedReposListProps {\n    data : RepositoriesByUserResponse | null\n}\n\nconst ContributedReposList = (props : ContributedReposListProps)=>{\n    return (<div className=\"contributed-repos-container\">\n        <div className=\"repos\">\n            {\n                props.data?.data.map((item, index)=>{\n                    return <ContributedRepoItem key={item.name} data={ item } />\n                })\n            }\n        </div>\n    </div>);\n}\n\nexport default ContributedReposList;","import React, { useEffect } from 'react'\nimport \"./index.scss\";\n\nimport { useParams, useHistory } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserInfoThunk } from '../../modules/user';\nimport { getAllChallengesThunk, getChallengesByUserThunk } from '../../modules/challenges';\nimport { getLatestChallengeAttendancesByUserThunk } from '../../modules/analytics';\nimport { getRepositoriesByUserThunk } from '../../modules/repositories';\nimport { RootState } from '../../modules';\n\nimport UserDetailHeader from './UserDetailHeader';\nimport ParticipatedChallengeList from './ParticipatedChallengeList';\nimport LatestAttendanceChart from './LatestAttendanceChart';\nimport ContributedReposList from './ContributedReposList';\n\n// TODO : 사용자 정보 \n// TODO : 사용자가 가지고 있는 repo\n// TODO : 사용자가 진행한 REPO\n// TODO : 사용자의 출석 정보 \n\nconst UserDetailScene = (props: any) => {\n    const { user_name } = useParams();\n    const history = useHistory();\n\n    const { user } = useSelector((state: RootState) => state.user);\n    const { challenges_by_user } = useSelector((state: RootState) => state.challenge);\n    const { repos_by_user } = useSelector((state: RootState) => state.repository);\n    const { latest_challenge_attendances_by_user } = useSelector((state: RootState) => state.analytics);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getUserInfoThunk(user_name || \"\"));\n        dispatch(getAllChallengesThunk());\n        dispatch(getChallengesByUserThunk(user_name || \"\"));\n        dispatch(getRepositoriesByUserThunk(user_name || \"\"));\n        dispatch(getLatestChallengeAttendancesByUserThunk(user_name || \"\"));\n        dispatch(getChallengesByUserThunk(user_name || \"\"));\n    }, [dispatch, user_name]);\n\n    useEffect(() => {\n        if (user.error) {\n            if (user.error.message.indexOf(\"404\") >= 0) {\n                history.push(\"./404-not-found\");\n            }\n            else {\n                alert(\"오류가 발생했습니다\");\n                history.push(\"../\");\n            }\n        }\n    }, [history, user.error]);\n\n    useEffect(() => {\n        if (user.data) {\n            if (user.data.code !== 1) {\n                alert(\"오류가 발생했습니다\");\n                history.push(\"/\");\n            }\n        }\n    }, [history, user.data, user.loading]);\n\n    return (<div className=\"user-content-container\">\n        <UserDetailHeader user={user.data?.data} />\n        <div className=\"content-container\">\n            <div className=\"content-wrapper\">\n                <div className=\"header\">\n                    <h2>\n                        참여한 도전 기간\n                    </h2>\n                </div>\n                <div className=\"wrapper\">\n                    <ParticipatedChallengeList user_challenges={ challenges_by_user.data?.data } />\n                </div>\n            </div>\n            <div className=\"content-wrapper\">\n                <div className=\"header\">\n                    <h2>\n                        도전 기간 활동 현황\n                    </h2>\n                </div>\n                <div className=\"wrapper\">\n                    {/* 차트 */}\n                    <LatestAttendanceChart data={ latest_challenge_attendances_by_user.data }/>\n                </div>\n            </div>\n            <div className=\"content-wrapper\">\n                <div className=\"header\">\n                    <h2>참여한 저장소들</h2>\n                </div>\n                <div className=\"wrapper\">\n                    <ContributedReposList data={ repos_by_user.data }/>\n                </div>\n            </div>\n        </div>\n\n    </div>);\n}\n\nexport default UserDetailScene;","import React, { CSSProperties } from 'react';\n\nimport { AiOutlineLoading } from 'react-icons/ai';\nimport './indicator.scss';\ninterface IndicatorProps {\n    style? : {[name:string] :CSSProperties},\n    className? : string,\n    iconStyle?:{[name:string]:CSSProperties},\n}\nconst Indicator = (props:IndicatorProps)=>{\n    return (\n        <span className={ \"_github_farm_mern_client_indicator \" + props.className } style={props.style}>\n            <AiOutlineLoading style={props.iconStyle} />\n        </span>\n    );\n}\n\nexport default Indicator;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { CSSProperties, useState, useEffect } from 'react';\nimport Colors from '../../../components/Colors.json';\nimport { Link } from 'react-router-dom';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../../modules';\nimport { postUserInfoThunk, clearPostUserInfoThunk } from '../../../modules/user/thunks';\n\nimport Indicator from '../../../components/Indicator';\n\ninterface RegisterUserProps {\n    style?: { [name: string]: CSSProperties },\n}\n\nconst RegistUser = (props: RegisterUserProps) => {\n    const { post_user } = useSelector((state: RootState) => state.user);\n    const INPUT_MODE_FORM = \"INPUT_MODE_FORM\";\n    const INPUT_MODE_RESULT = \"INPUT_MODE_RESULT\";\n    const [errorMesg, setErrorMesg] = useState(\"\");\n    const [inputMode, setInputMode] = useState(INPUT_MODE_FORM);\n    const [userName, setUserName] = useState(\"\");\n    const [insertedUserName, setInsertedUserName]= useState(\"\");\n    const [isRequested, setIsRequested] = useState(false);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (post_user.error) {\n            setErrorMesg(\"오류가 발생했습니다. 잠시 후 다시 시도해주세요\");\n        }\n        else {\n            setErrorMesg(\"\");\n            if(post_user.data){\n                if(post_user.data.code < 0){\n                    // 오류인 경우\n                    if(post_user.data.code === -1){\n                        setErrorMesg(post_user.data.message.toString());\n                    }\n                    else if(post_user.data.error && post_user.data.code === -2){\n                        if(post_user.data.error.statusCode === 404){\n                            setErrorMesg('존재하지 않는 사용자 입니다');\n                        }\n                        else{\n                            setErrorMesg(`github 응답이 올바르지 않습니다 | ${post_user.data.error.message || post_user.data.error.code}`);\n                        }\n                    }\n                    else{\n                        setErrorMesg(\"데이터를 가져오는 중 오류가 발생했습니다\");\n                    }\n                }\n                else {\n                    setInsertedUserName(userName);\n                    setUserName(\"\");\n                    setInputMode(INPUT_MODE_RESULT);\n                    // 정상인 경우\n                }\n            }\n        }\n        return ()=>{\n            setErrorMesg(\"\");\n            setUserName(\"\");\n        }\n    }, [post_user.error, post_user.data]);\n    useEffect(()=>{\n        setIsRequested(post_user.loading);\n    },[post_user.loading]);\n    useEffect(()=>{\n        return function () {\n            setInsertedUserName(\"\");\n            setErrorMesg(\"\");\n            setUserName(\"\");\n            setInputMode(INPUT_MODE_FORM);\n            dispatch(clearPostUserInfoThunk());\n        }\n    },[]);\n\n    \n    const fn = {\n        submit: () => {\n            if(isRequested){ alert(\"이미 요청 중 입니다. 잠시만 기다려주세요.\"); return;}\n            dispatch(postUserInfoThunk(userName.trim()));\n        }\n    }\n\n    const ui = {\n        // 에러 메시지가 있는 경우 에러 메시지 태그를 생성\n        getForm: () => {\n            if (inputMode === INPUT_MODE_FORM) {\n                return <div style={styles.wrapper}>\n                    <input type=\"text\" placeholder=\"github 유저 계정을 입력해주세요\" style={styles.input} value={ userName } onChange={ e=>setUserName(e.target.value) } onKeyPress={ e=>{if(e.which === 13 || e.keyCode === 13){ /*setUserName(e.currentTarget.value); fn.submit();*/ }} }/>\n                    <button type=\"button\" style={styles.btn} onClick={fn.submit}>\n                        {\n                            isRequested ? <Indicator/> : \"등록\"\n                        }\n                    </button>\n                </div>;\n            }\n            else {\n                return <div style={styles.resultWrapper}>\n                    <p style={styles.resultSubText}>어서오세요!</p>\n                    <p style={styles.resultText} >입력하신 '<b style={styles.resultTextHighlight}>{insertedUserName}</b>'가 등록되었습니다!</p>\n                    <Link to={`users/${insertedUserName}`} style={styles.resultLink}>내 정보 확인하러 가기</Link>\n                </div>;\n            }\n        },\n    }\n\n    return (<div style={{ ...props.style, ...styles.container }}>\n        { errorMesg !== \"\" ? <p style={styles.error}>{errorMesg}</p> : <></> }\n        {ui.getForm()}\n    </div>);\n}\n\nconst styles: { [name: string]: CSSProperties } = {\n    container: {\n        margin: '150px 0',\n        maxWidth: '800px',\n    },\n    wrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    input: {\n        flex: 9,\n        border: 0,\n        backgroundColor: '#0000',\n        fontSize: '3em',\n        fontWeight: 100,\n        borderBottom: '1px solid ' + Colors.text.highlight,\n        color: Colors.text.default,\n    },\n    btn: {\n        flex: 2,\n        border: 0,\n        backgroundColor: '#0000',\n        color: Colors.text.highlight,\n        fontWeight: 100,\n        fontSize: '3em',\n        cursor: 'pointer',\n    },\n    error: {\n        margin: 0,\n        padding: 0,\n        fontWeight: 100,\n        color: Colors.red,\n        fontSize: '1.5em',\n    },\n    resultWrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    resultSubText: {\n        fontWeight: 100,\n        fontSize: '2em',\n        color: '#fff',\n        margin: 0,\n        padding: 0,\n    },\n    resultText: {\n        fontSize: '2.5em',\n        fontWeight: 100,\n        color: '#fff',\n        margin: 0,\n        padding: 0,\n    },\n    resultTextHighlight: {\n        fontWeight: 800,\n        color: Colors.text.highlight,\n        margin: 0,\n        padding: 0,\n    },\n    resultLink: {\n        fontWeight: 100,\n        fontSize: '1.5em',\n        textDecoration: 'none',\n        color: Colors.text.highlight,\n        margin: 0,\n        padding: 0,\n    },\n}\n\nexport default RegistUser;","import React, { CSSProperties } from 'react';\nimport Colors from '../../components/Colors.json';\nimport RegistUser from './RegistUser';\n\nconst Index = () => {\n    return (<div style={styles.container}>\n        <div style={ stHeader.container }>\n            <h2 style={ { ...styles.text, ...stHeader.subTitle } }>안녕하세요!</h2>\n            <h1 style={ { ...styles.text, ...stHeader.title } }>\n                <b style={{ ...styles.text, ...stHeader.highlight }}>정원사 프로젝트</b>\n                에 어서오세요!\n            </h1>\n            <p style={ { ...styles.text, ...stHeader.desc } }>처음오셨나요? github 계정명을 입력해주시면 참여할 수 있습니다!</p>\n           <RegistUser/> \n        </div>\n    </div>);\n}\n\nconst styles: { [name: string]: CSSProperties } = {\n    container: {\n        marginLeft:'80px',\n        padding : '50px 50px 0 50px',\n    },\n    text: {\n        color:Colors.text.default,\n        margin:0,\n        padding:0,\n    }\n}\n\nconst stHeader: { [name:string]: CSSProperties } = {\n    container : {\n        // marginTop:'50px',\n    },\n    subTitle:{\n        fontSize:'3em',\n        fontWeight:100,\n    },\n    desc: {\n        marginTop:'1em',\n        marginBottom:'1.5em',\n        fontSize:'1.5em',\n        fontWeight:100,\n        // textAlign:'center',\n    },\n    error:{\n        fontWeight:100,\n        color:Colors.red,\n        fontSize:'1.5em',\n    },\n    title: {\n        fontSize:'4.5em',\n        fontWeight:100,\n        color:Colors.text.default,\n        lineHeight:'1em',\n    },\n    highlight:{\n        lineHeight:'1em',\n        color:Colors.text.highlight,\n    },\n    inputContainer:{\n        margin:'150px 0',\n        maxWidth:'800px',\n    },\n    inputWrapper:{\n        display:'flex',\n        flexDirection:'row',\n    },\n    input:{\n        border:0,\n        backgroundColor:'rgba(0,0,0,0)',\n        fontSize:'3em',\n        fontWeight:100,\n        width:'100%',\n        borderBottom:'1px solid ' + Colors.text.highlight,\n        color:Colors.text.default,\n        flex:9\n    },\n    inputBtn:{\n        flex:2,\n        border:0,\n        color:Colors.text.highlight,\n        backgroundColor:'#0000',\n        fontWeight:100,\n        fontSize:'3em',\n        borderTopRightRadius:'10px',\n        borderBottomRightRadius:'10px',\n        cursor:'pointer',\n    }\n}\n\nexport default Index;\n","import React, { CSSProperties } from 'react';\n\nconst NotFoundScene = () =>{\n    return (<div style={ styles.container }>\n        <p style={styles.text}>Sorry :-(</p>\n        <p style={styles.text}>Page is not found</p>\n    </div>);\n}\n\nconst styles : { [name:string] : CSSProperties } ={\n    container : {\n        marginLeft:'80px',\n        padding : '50px 50px 0 50px',\n    },\n    text:{\n        color:'white',\n        fontWeight:100,\n        fontSize:'3.5em',\n        margin:0,\n        padding:0,\n    }\n}\n\nexport default NotFoundScene;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport \"./UserListScene.scss\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../modules';\nimport { clearUsersSearchThunk, getUsersInfoThunk } from '../../modules/user/thunks';\nimport { Link } from 'react-router-dom';\nimport UserInfoInterface from '../../api/interfaces/UserInfo';\n\nconst UserListScene = () => {\n    const { users } = useSelector((state: RootState) => state.user);\n    const dispatch = useDispatch();\n    const avatar_size = 80;\n\n    useEffect(() => {\n        dispatch(getUsersInfoThunk());\n        return () => {\n            dispatch(clearUsersSearchThunk());\n        }\n    }, []);\n\n    const getUserAvatarUrl = (user:UserInfoInterface) =>{\n        if(user.avartar_url && user.avartar_url !== \"\"){\n            return user.avartar_url;\n        }\n        else{\n            return `https://avatars1.githubusercontent.com/u/${user.id}?s=${avatar_size * 2}`;\n        }\n        \n    }\n\n    const ui = {\n        user: () => {\n            if (users.data && users.data.data) {\n                return users.data.data.map(user => {\n                    return (\n                        <div key={ user.id.toString() } className=\"user-container\">\n                            <div className=\"avatar-wrapper\">\n                                <img className=\"avatar\" src={ getUserAvatarUrl(user).toString() } alt=\"사용자 깃허브 프로필 이미지\" />\n                            </div>\n                            <div className=\"desc\">\n                                <p className=\"login\">{user.login}</p>\n                                <p className=\"user-name\">{user.name}</p>\n                                \n                            </div>\n                            <Link className=\"detail-btn\" to={ `/users/${user.login}` }>보기</Link>\n                        </div>\n                    );\n                });\n            }\n            else {\n                return <></>;\n            }\n        }\n    }\n\n    return (<div className=\"content-container\">\n        <div className=\"header-wrapper\">\n            <h1 className=\"header-title\">\n                함께하는 정원사들\n            </h1>\n            <div className=\"header-content\">\n                <div className=\"search-wrapper\">\n                    <input className=\"search-input\" type=\"text\" />\n                    <button className=\"search-btn\" type=\"button\">검색</button>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"content-wrapper\">\n            { ui.user() }\n        </div>\n    </div>);\n}\n\nexport default UserListScene;","import { combineReducers } from 'redux';\nimport user from './user';\nimport analytics from './analytics';\nimport repository from './repositories';\nimport challenge from './challenges';\n\nconst rootReducer = combineReducers({\n    user,\n    analytics,\n    repository,\n    challenge,\n});\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\n\n// 현재 진행하고 있는 도전 이름 \n// 해당 도전에 참가하고 있는 사용자들 \n\nconst UserListContent = ()=>{\n    return (<div className=\"content-container\">\n        <div className=\"message-container\">\n            <p className=\"title\">\n                <b>정원사 프로젝트</b>에 어서오세요!\n            </p>\n            <p className=\"desc\">\n                상세 정보를 확인할 정원사님을 선택해주세요\n            </p>\n        </div>\n    </div>);\n}\n\nexport default UserListContent;","import React from 'react';\nimport UserInfoInterface from '../../../api/interfaces/UserInfo';\nimport { getAvatarURL, getUserName } from '../../../lib/github';\n\nimport {MdAddCircleOutline, MdRemoveCircleOutline} from 'react-icons/md';\n\ninterface UserItemProps{\n    data : UserInfoInterface,\n    onClick?(user:UserInfoInterface): any,\n    type : \"ADD\" | \"DEL\",\n}\n\nconst UserItem = (props:UserItemProps)=>{\n    return (\n        <div className=\"user-info\" onClick={ ()=>{ if(props.onClick){ props.onClick(props.data) } } }>\n            <div className=\"avatar\">\n                <div className=\"icon\">{ props.type === \"ADD\" ? <MdAddCircleOutline/> : <MdRemoveCircleOutline/> }</div>\n                <img src={ getAvatarURL(props.data, 80) } alt={ props.data.login + \" 프로필 이미지\" }/>\n            </div>\n            <div className=\"info\">  \n                <p>{ getUserName(props.data.login, props.data.name) }</p>\n            </div>\n        </div>\n    );    \n}\n\nexport default UserItem;","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport ChallengeInterface from '../../../api/interfaces/Challenge';\nimport './UserList.scss';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../modules';\nimport { getUsersInfoThunk } from '../../../modules/user';\nimport { getAllChallengesThunk } from '../../../modules/challenges';\nimport { postUserToChallenge, deleteUserFromChallenge } from '../../../api/challenge';\n\nimport UserItem from './UserItem';\nimport UserInfoInterface from '../../../api/interfaces/UserInfo';\n\ninterface UserListProps {\n    challenge: ChallengeInterface | undefined,\n}\n\n\n\nconst UserList = (props: UserListProps) => {\n    const [isRequested, setIsRequested] = useState(false);\n    const { users } = useSelector((state: RootState) => state.user);\n    const intialNotParticipatedUsers: Array<UserInfoInterface> = [];\n    const [notParticipatedUsers, setNotParticipatedUsers] = useState(intialNotParticipatedUsers);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getUsersInfoThunk());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (props.challenge && users.data && users.data.status === \"success\") {\n            // 데이터가 있는 경우에만 \n            let _notParticipated: Array<UserInfoInterface> = [];\n            users.data.data.forEach(item => {\n                let found = false;\n                if (props.challenge?.participants.find(participant => participant.login === item.login)) {\n                    // 찾았을 때 (!== undefined) 발견 처리 함\n                    found = true;\n                }\n                if (!found) { _notParticipated.push(item); }\n            });\n            setNotParticipatedUsers(_notParticipated);\n        }\n    }, [users.data, props.challenge]);\n\n    const fn = {\n        isExpired : (finish_dt: string | Date)=>{\n            const _mFinishDt = moment(finish_dt);\n            const _mNow = moment();\n            if(_mNow.diff(_mFinishDt) > 0){\n                return true;\n            }\n            else{\n                return false;\n            }\n        },\n        add : async (user: UserInfoInterface)=>{\n            if(props.challenge !== undefined){\n                if(fn.isExpired(props.challenge.finish_dt)){\n                    window.alert(\"이미 완료된 일정은 수정할 수 없습니다\");\n                    return;\n                }\n                if(isRequested){ window.alert(\"이미 요청 중 입니다\"); return; }\n                setIsRequested(true);\n                const result = await postUserToChallenge(user.login.toString(), props.challenge.id);\n                setIsRequested(false);\n                if(result.status === 'SUCCESS'){\n                    dispatch(getUsersInfoThunk());\n                    dispatch(getAllChallengesThunk());\n                }\n            }\n        },\n        del : async (user: UserInfoInterface)=>{\n            if(props.challenge !== undefined){\n                if(fn.isExpired(props.challenge.finish_dt)){\n                    window.alert(\"이미 완료된 일정은 수정할 수 없습니다\");\n                    return;\n                }\n                if(isRequested){ window.alert(\"이미 요청 중 입니다\"); return; }\n                setIsRequested(true);\n                const result = await deleteUserFromChallenge(props.challenge.id,user.login.toString());\n                setIsRequested(false);\n                if(result.code > 0){\n                    dispatch(getUsersInfoThunk());\n                    dispatch(getAllChallengesThunk());\n                }\n            }\n        }\n    }\n\n    if (props.challenge) {\n        return (<div className=\"setting-user-list-container\">\n            <div className=\"list-wrapper participated\">\n                <p className=\"header\">참여한 정원사들</p>\n                <div className=\"content-container\">\n                    {\n                        props.challenge.participants.map(item => {\n                            return <UserItem key={item.login.toString()} type=\"DEL\" data={item} onClick={ fn.del }/>;\n                        })\n                    }\n                </div>\n            </div>\n            <div className=\"list-wrapper not-participated\">\n                <p className=\"header\">참여하지 않은 정원사들</p>\n                <div className=\"content-container\">\n                    {\n                        notParticipatedUsers.map(item => {\n                            return <UserItem key={item.login.toString()} type=\"ADD\" data={item} onClick={ fn.add }/>;\n                        })\n                    }\n                </div>\n            </div>\n        </div>);\n    }\n    else {\n        return (<></>);\n    }\n}\n\nexport default UserList;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { getLatestChallengeThunk, getAllChallengesThunk } from '../../modules/challenges/thunks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../modules/';\nimport moment from 'moment';\n\nimport { IoIosAddCircle } from 'react-icons/io';\nimport { GoVerified } from 'react-icons/go';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport \"./index.scss\";\nimport ChallengeDetail from './ChallengeDetail';\n\nimport UserList from './UserList';\n\nconst SettingScene = () => {\n    enum inputModeEnum { EDIT, ADD, HIDE };\n\n    const { all_challenges } = useSelector((state: RootState) => state.challenge);\n    const dispatch = useDispatch();\n    const [selectedChallengeId, setSelectedChallengeId] = useState(\"\");\n    const [inputMode, setInputMode] = useState(inputModeEnum.HIDE);\n\n    useEffect(() => {\n        dispatch(getLatestChallengeThunk());\n        dispatch(getAllChallengesThunk());\n    }, []);\n\n    const ui = {\n        getDateString: (start_dt: string | undefined, finish_dt: string | undefined) => {\n            if (start_dt && finish_dt) {\n                const mStartDt = moment(start_dt);\n                const mFinishDt = moment(finish_dt);\n                return `${mStartDt.format(\"YYYY-MM-DD\")} - ${mFinishDt.format(\"YYYY-MM-DD\")}`;\n            }\n            else {\n                return \"\";\n            }\n        },\n        getActiveClass: (id: string) => {\n            if (selectedChallengeId === id) {\n                return \"active\";\n            }\n            else {\n                return \"\";\n            }\n        },\n        selectChallenge: (id: string) => {\n            setSelectedChallengeId(id);\n            setInputMode(inputModeEnum.EDIT);\n        },\n        addChalenge: () => {\n            setSelectedChallengeId(\"\");\n            setInputMode(inputModeEnum.ADD);\n        },\n        onCancel: ()=>{\n            setSelectedChallengeId(\"\");\n            setInputMode(inputModeEnum.HIDE);\n        }\n    }\n\n    return (<div className=\"contents settings\">\n        {/* 현재 진행중인 프로젝트 목록 */}\n        <div className=\"header-container\">\n            <h1>\n                프로젝트 관리 🛠\n            </h1>\n            <p>새로운 도전 기간을 추가하거나, 편집 혹은 삭제합니다</p>\n        </div>\n        <div className=\"content-container\">\n            <div className=\"challenge-list\">\n                {all_challenges.data?.data.map((item, idx) => {\n                    return (\n                        <div className={\"challenge-container \" + ui.getActiveClass(item.id)} key={item.id} onClick={() => ui.selectChallenge(item.id)} >\n                            <p className=\"title\">{item.title}</p>\n                            <p className=\"date\">\n                                {\n                                    ui.getDateString(item.start_dt, item.finish_dt)\n                                }\n                            </p>\n                            <div className=\"desc\">\n                                <p className=\"text\">현재 참가자 수 : {item.participants.length}</p>\n                                { item.is_featured ? <p className=\"text\"><GoVerified/>인증됨</p> : <></> }\n                            </div>\n                        </div>\n                    );\n                })}\n                <div className=\"challenge-container insert\" onClick={ui.addChalenge}>\n                    <IoIosAddCircle />\n                </div>\n            </div>\n            \n        </div>\n        {/* 프로젝트 추가하기 */}\n        <ChallengeDetail \n            mode={inputMode} \n            challenge={all_challenges.data?.data.find(challenge => challenge.id === selectedChallengeId)}\n            onCancel={ ui.onCancel } \n        />\n        {\n            inputMode === inputModeEnum.EDIT ? \n            <UserList challenge={all_challenges.data?.data.find(challenge => challenge.id === selectedChallengeId)}/>:\n            <></>\n        }\n    </div>);\n}\n\nexport default SettingScene;\n","import React from 'react';\nimport './info.scss';\nimport { DiMitlicence } from 'react-icons/di';\nconst InfoScene = () => {\n    return (\n        <div className=\"contents info\">\n            <h1 className=\"title\">\n                <b>정원사 프로젝트</b>를 이용해주셔서 감사합니다 😎\n            </h1>\n            <p className=\"desc\">\n                <b>정원사 프로젝트</b>는 깃허브 API를 이용해 a commit a day 프로젝트를 진행하는 것을 도와주는 서비스입니다.\n            </p>\n\n            <div className=\"content-wrapper\">\n                <div className=\"info-item\">\n                    <p className=\"info-title\">제작 : </p>\n                    <a className=\"info-link\" href=\"https://github.com/YOOGOMJA\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        유경수\n                    </a>\n                </div>\n                <div className=\"info-item\">\n                    <p className=\"info-title\">메일 : </p>\n                    <a className=\"info-link\" href=\"mailto://dev.yoogomja@gmail.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        dev.yoogomja@gmail.com\n                    </a>\n                </div>\n                <div className=\"info-item\">\n                    <p className=\"info-title\">API Github Repository : </p>\n                    <a className=\"info-link\" href=\"https://github.com/YOOGOMJA/github_farm_mern\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        YOOGOMJA/github_farm_mern\n                    </a>\n                </div>\n                <div className=\"info-item\">\n                    <p className=\"info-title\">Client Github Reposioty : </p>\n                    <a className=\"info-link\" href=\"https://github.com/YOOGOMJA/github_farm_mern_client\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        YOOGOMJA/github_farm_mern_client\n                    </a>\n                </div>\n                <div className=\"info-item\">\n                    <p className=\"info-title\">License : </p>\n                    <p className=\"license\"><DiMitlicence/>MIT Licence</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default InfoScene;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport MainScene from './scenes/MainScene';\nimport SideMenu from './components/SideMenu';\nimport UserDetailScene from './scenes/UserDetailScene';\nimport RegisterUserScene from './scenes/RegisterUserScene';\nimport NotFoundScene from './scenes/NotFoundScene';\nimport UserListScene from './scenes/UserListScene';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport Thunk from 'redux-thunk';\nimport rootReducer from './modules';\n\nimport './styles/userList.scss';\nimport UserListContent from './scenes/UserListScene/UserListContent';\nimport SettingScene from './scenes/SettingScene';\nimport InfoScene from './scenes/InfoScene';\n\nconst store = createStore(rootReducer, applyMiddleware(Thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <div style={{ height: 'fit-content', }}>\n        <Router>\n          <SideMenu />\n          <Switch>\n            <Route exact path=\"/\" component={MainScene} />\n            <Route path=\"/register\" component={RegisterUserScene} />\n            <Route path=\"/users\">\n              <div className=\"users-contents-container\">\n                <div className=\"user-list\">\n                  {/* 목록 페이지 */}\n                  <Route path=\"/users\" component={UserListScene} />\n                </div>\n                <div className=\"user-list-content\">\n                  <Switch>\n                    <Route exact path=\"/users/\" component={UserListContent} />\n                    {/* 유저 404 페이지 */}\n                    {/* <Route path=\"/users/\" component={UserNotFoundScene} /> */}\n                    {/* 유저별 상세 페이지  */}\n                    <Route path=\"/users/:user_name\" component={UserDetailScene} />\n                  </Switch>\n                </div>\n              </div>\n            </Route>\n            <Route path=\"/info\" component={ InfoScene } />\n            <Route path=\"/settings\" component={ SettingScene } />\n            <Route path=\"*\" component={NotFoundScene} />\n          </Switch>\n\n        </Router>\n      </div>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export { default } from './reducer';\nexport * from './actions';\nexport * from './types';\nexport * from './thunks';","export { default } from './reducer';\nexport * from './actions';\nexport * from './types';\nexport * from './thunks';","import { createAsyncAction } from 'typesafe-actions';\nimport { RepositoriesByUserResponse } from '../../api/repo';\nimport { AxiosError } from 'axios';\n\nexport const GET_REPOSITORIES_BY_USER = 'repo/GET_REPOSITORIES_BY_USER';\nexport const GET_REPOSITORIES_BY_USER_SUCCESS = 'repo/GET_REPOSITORIES_BY_USER_SUCCESS';\nexport const GET_REPOSITORIES_BY_USER_ERROR = 'repo/GET_REPOSITORIES_BY_USER_ERROR';\nexport const GET_REPOSITORIES_BY_USER_CLEAR = 'repo/GET_REPOSITORIES_BY_USER_CLEAR';\n\nexport const getRepositoriesByUserAsync = createAsyncAction(\n    GET_REPOSITORIES_BY_USER,\n    GET_REPOSITORIES_BY_USER_SUCCESS,\n    GET_REPOSITORIES_BY_USER_ERROR,\n    GET_REPOSITORIES_BY_USER_CLEAR\n)<undefined, RepositoriesByUserResponse, AxiosError, undefined>();","import axios from \"axios\";\nimport GitFarmResponseInterface from \"./interfaces/GitFarmResponse\";\nimport UserInfoInterface from './interfaces/UserInfo';\n\nconst REACT_API_HOST = process.env.REACT_APP_API_HOST;\n\nexport async function getUserInfo(user_name: string) {\n    const response = await axios.get<UserInfo>(\n        `${REACT_API_HOST}/api/users/${user_name}`\n    );\n    return response.data;\n}\n\nexport async function getUsersInfo() {\n    const response = await axios.get<UsersInfo>(`${REACT_API_HOST}/api/users`);\n    return response.data;\n}\n\nexport async function postUserInfo(user_name: string){\n    const response = await axios.post<GitFarmResponseInterface>(\n        `${REACT_API_HOST}/api/users/${user_name}`\n    );\n    return response.data;\n}\n\nexport async function getUsersParticipatedLatestChallenge(){\n    const response = await axios.get<UsersInfo>(\n        `${REACT_API_HOST}/api/users/latest`\n    );\n    return response.data;\n}\n\nexport async function deleteUser(user_name:string){\n    const response = await axios.delete<GitFarmResponseInterface>(\n        `${REACT_API_HOST}/api/users/${user_name}`\n    );\n    return response.data;\n}\n\nexport async function fetchUserInfo (user_name:string){\n    const response = await axios.post<GitFarmResponseInterface>(\n        `${REACT_API_HOST}/api/users/${user_name}/fetch`\n    );\n    return response.data;\n}\n\nexport async function getUsersSearch(user_name:string){\n    const reponse = await axios.get<UsersInfo>(\n        `${REACT_API_HOST}/api/users/search`,\n        {\n            params: {\n                user_name : user_name.trim()\n            }\n        }\n    );\n    return reponse.data;\n}\n\nexport interface UsersInfo extends GitFarmResponseInterface{\n    data: [UserInfoInterface]\n}\n\nexport interface UserInfo extends GitFarmResponseInterface{\n    data: UserInfoInterface\n}\n","import axios from \"axios\";\nimport GitFarmResponseInterface from \"./interfaces/GitFarmResponse\";\nimport UserInfoInterface from \"./interfaces/UserInfo\";\nimport { RepositoryDetailWithoutUser } from \"./interfaces/Repository\";\n\nconst REACT_API_HOST = process.env.REACT_APP_API_HOST;\n\nexport async function getSummary() {\n    const res = await axios.get<Summary>(\n        `${REACT_API_HOST}/api/analysis/summary`\n    );\n    return res.data;\n}\n\nexport async function getAllAttendances() {\n    const res = await axios.get<AllAttendances>(\n        `${REACT_API_HOST}/api/analysis/attendances`\n    );\n    return res.data;\n}\n\nexport async function getAllAttendancesByDates() {\n    const res = await axios.get<AllAttendancesByDates>(\n        `${REACT_API_HOST}/api/analysis/attendances/date`\n    );\n    return res.data;\n}\n\nexport async function getLatestChallengeAttendancesByUser(\n    user_name: string\n) {\n    const res = await axios.get<LatestChallengeAttendancesByUserReponse>(\n        `${REACT_API_HOST}/api/analysis/attendances/latest/users/${user_name}`\n    );\n    return res.data;\n}\n\nexport async function getLanguagesPopularity() {\n    const res = await axios.get<Languages>(\n        `${REACT_API_HOST}/api/analysis/languages`\n    );\n    return res.data;\n}\n\nexport async function getPopularRepository() {\n    const res = await axios.get<PopularRepository>(\n        `${REACT_API_HOST}/api/analysis/repo/popular`\n    );\n    return res.data;\n}\n\nexport async function getHottestRepository(){\n    const res = await axios.get<HottestRepository>(\n        `${REACT_API_HOST}/api/analysis/repo/hottest`\n    );\n    return res.data;\n}\n\ninterface SummaryInterface {\n    // 현재 저장된 저장소 수\n    repo_cnt: Number;\n    // 사용자 수\n    user_cnt: Number;\n    // 모든 커밋의 갯수\n    commit_cnt: Number;\n    // 현재까지 진행된 일자\n    challenge_duration: number;\n    // 현재 도전의 남은 도전일자\n    current_challenge: {\n        title: string;\n        left_days: number;\n    };\n}\n\ninterface AllAttendancesInterface {\n    // 사용자의 정보\n    info: UserInfoInterface;\n    // 모든 참여 횟수\n    attendances_count: Number;\n    // 참여율\n    attendances_rate: Number;\n    // 일자별 참여 정보\n    attendances: { [date: string]: Number };\n}\n\ninterface LanguagePopularityInterface {\n    _id: { language_name: string };\n    rate: Number;\n    rate_percentage: Number;\n}\n\nexport interface Summary extends GitFarmResponseInterface {\n    data: SummaryInterface;\n}\n\nexport interface AllAttendances extends GitFarmResponseInterface {\n    data: [AllAttendancesInterface];\n}\n\nexport interface LatestChallengeAttendancesByUserReponse extends GitFarmResponseInterface{\n    data : [AllAttendancesInterface];\n}\n\nexport interface AllAttendancesByDates extends GitFarmResponseInterface {\n    data: [\n        {\n            date: string;\n            cnt: number;\n            all: number;\n            rate: number;\n        }\n    ];\n}\n\nexport interface Languages extends GitFarmResponseInterface {\n    data: [LanguagePopularityInterface];\n}\n\nexport interface HottestRepository extends GitFarmResponseInterface {\n    data: RepositoryDetailWithoutUser;\n}\n\nexport interface PopularRepository extends GitFarmResponseInterface {\n    data: RepositoryDetailWithoutUser;\n}\n\n","import { ThunkAction } from 'redux-thunk';\nimport { RootState } from '..';\nimport { UserAction } from './types';\nimport { getUserInfo, getUsersInfo, postUserInfo, getUsersSearch, getUsersParticipatedLatestChallenge } from '../../api/user';\nimport { getUserInfoAsync, getUsersInfoAsync, postUserInfoAsync, getUsersSearchAsync, getUsersParticipatedLatestChallengeAsync } from './actions';\n\nexport function getUserInfoThunk(user_name:string): ThunkAction<void, RootState, null, UserAction>{\n    return async dispatch => {\n        const { request, success, failure } = getUserInfoAsync;\n        dispatch(request());\n        try{\n            const userInfo = await getUserInfo(user_name);\n            dispatch(success(userInfo));\n        }\n        catch(e){\n            dispatch(failure(e));\n        }\n    };\n}\n\nexport function clearUserInfoThunk():ThunkAction<void, RootState, null, UserAction>{\n    return dispatch=>{\n        const { cancel } = getUserInfoAsync;\n        dispatch(cancel());\n    }\n}\n\nexport function getUsersInfoThunk():ThunkAction<void, RootState, null, UserAction>{\n    return async dispatch=>{\n        const {request, success, failure} = getUsersInfoAsync;\n        dispatch(request());\n        try{\n            const usersInfo = await getUsersInfo();\n            dispatch(success(usersInfo));\n        }\n        catch(e){\n            dispatch(failure(e));\n        }\n    }\n}\n\nexport function clearUsersInfoThunk():ThunkAction<void, RootState, null, UserAction>{\n    return dispatch=>{\n        const { cancel } = getUsersInfoAsync;\n        dispatch(cancel());\n    }\n}\n\nexport function postUserInfoThunk(user_name: string): ThunkAction<void, RootState, null, UserAction>{\n    return async dispatch=>{\n        const {request, success, failure} = postUserInfoAsync;\n        dispatch(request());\n        try{\n            const response = await postUserInfo(user_name);\n            dispatch(success(response));\n        }\n        catch(e){\n            dispatch(failure(e));\n        }\n    }\n}\n\nexport function clearPostUserInfoThunk():ThunkAction<void, RootState, null, UserAction>{\n    return dispatch=>{\n        const { cancel } = postUserInfoAsync;\n        dispatch(cancel());\n    }\n}\n\nexport function getUsersSearchThunk(user_name:string):ThunkAction<void,RootState,null,UserAction>{\n    return async dispatch=>{\n        const { request, success, failure } = getUsersSearchAsync;\n        dispatch(request());\n        try{\n            const response = await getUsersSearch(user_name);\n            dispatch(success(response));\n        }\n        catch(e){\n            dispatch(failure(e));\n        }\n    }\n}\n\nexport function clearUsersSearchThunk():ThunkAction<void, RootState, null, UserAction>{\n    return dispatch=>{\n        const { cancel } = getUsersSearchAsync;\n        dispatch(cancel());\n    }\n}\n\n\nexport function getUsersParticipatedLatestChallengeThunk():ThunkAction<void,RootState,null,UserAction>{\n    return async dispatch=>{\n        const { request, success, failure } = getUsersParticipatedLatestChallengeAsync;\n        dispatch(request());\n        try{\n            const response = await getUsersParticipatedLatestChallenge();\n            dispatch(success(response));\n        }\n        catch(e){\n            dispatch(failure(e));\n        }\n    }\n}\n\nexport function clearUsersParticipatedLatestChallengeThunk():ThunkAction<void, RootState, null, UserAction>{\n    return dispatch=>{\n        const { cancel } = getUsersParticipatedLatestChallengeAsync;\n        dispatch(cancel());\n    }\n}\n\n","import { ThunkAction } from 'redux-thunk';\nimport { RootState } from '..';\nimport { ChallengeAction } from './types';\nimport { getAllChallenges, getChallengesByUser, getLatestChallenge } from '../../api/challenge';\nimport { getAllChallengesAsync, getChallengesByUserAsync, getLatestChallengeAsync } from './actions';\n\nexport function getAllChallengesThunk():ThunkAction<void, RootState, null, ChallengeAction>{\n    return async dispatch=>{\n        const {request, success, failure} = getAllChallengesAsync;\n        dispatch(request());\n        try{\n            const response = await getAllChallenges();\n            dispatch(success(response));\n        }\n        catch(e){\n            dispatch(failure(e));\n        }\n    }\n}\n\nexport function clearAllChallengesThunk():ThunkAction<void, RootState, null, ChallengeAction>{\n    return async dispatch=>{\n        const { cancel } = getAllChallengesAsync;\n        dispatch(cancel());\n    }\n}\n\nexport function getChallengesByUserThunk(user_name:string):ThunkAction<void, RootState, null, ChallengeAction>{\n    return async dispatch=>{\n        const { request, success, failure } = getChallengesByUserAsync;\n        dispatch(request());\n        try{\n            const response = await getChallengesByUser(user_name);\n            dispatch(success(response));\n        }\n        catch(e){\n            dispatch(failure(e));\n        }\n    }\n}\n\nexport function clearChallengesByUserThunk():ThunkAction<void, RootState, null, ChallengeAction>{\n    return dispatch=>{\n        const {cancel}= getChallengesByUserAsync;\n        dispatch(cancel());\n    }\n}\n\nexport function getLatestChallengeThunk():ThunkAction<void, RootState, null, ChallengeAction>{\n    return async dispatch =>{\n        const { request, success, failure } = getLatestChallengeAsync;\n        dispatch(request());\n        try{\n            const response = await getLatestChallenge();\n            dispatch(success(response))\n        }\n        catch(e){\n            dispatch(failure(e));\n        }\n    }\n}\n","import axios from 'axios';\nimport GitFarmResponseInterface from './interfaces/GitFarmResponse';\nimport { RepositoryWithUser } from './interfaces/Repository';\n\nconst REACT_API_HOST = process.env.REACT_APP_API_HOST;\n\nexport async function getRepositoriesByUser(user_name:string){\n    const res = await axios.get<RepositoriesByUserResponse>(\n        `${REACT_API_HOST}/api/repos/users/${user_name}`\n    );\n    return res.data;\n}\n\nexport interface RepositoriesByUserResponse extends GitFarmResponseInterface{\n    data : [ RepositoryWithUser ]\n}","export { default } from './reducer';\nexport * from './actions';\nexport * from './types';\nexport * from './thunks';\n","import { createReducer } from \"typesafe-actions\";\nimport { AnalyticsAction, AnalyticsState } from \"./types\";\nimport {\n    GET_SUMMARY,\n    GET_SUMMARY_ERROR,\n    GET_SUMMARY_SUCCESS,\n    GET_ALL_ATTENDANCES,\n    GET_ALL_ATTENDANCES_ERROR,\n    GET_ALL_ATTENDANCES_SUCCESS,\n    GET_ALL_ATTENDANCES_BY_DATES,\n    GET_ALL_ATTENDANCES_BY_DATES_SUCCESS,\n    GET_ALL_ATTENDANCES_BY_DATES_ERROR,\n    GET_LANGUAGES_POPULARITY,\n    GET_LANGUAGES_POPULARITY_SUCCESS,\n    GET_LANGUAGES_POPULARITY_ERROR,\n    GET_POPULAR_REPOSITORY,\n    GET_POPULAR_REPOSITORY_SUCCESS,\n    GET_POPULAR_REPOSITORY_ERROR,\n    GET_HOTTEST_REPOSITORY,\n    GET_HOTTEST_REPOSITORY_SUCCESS,\n    GET_HOTTEST_REPOSITORY_ERROR,\n    GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER,\n    GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_SUCCESS,\n    GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_ERROR,\n    CLEAR_LATEST_CHALLENGE_ATTENDANCES_BY_USER,\n} from \"./actions\";\n\nconst intialState:AnalyticsState = {\n    summary: {\n        loading: false,\n        error: null,\n        data: null,\n    },\n    all_attendances:{\n        loading: false,\n        error: null,\n        data: null,\n    },\n    languages: {\n        loading: false,\n        error : null,\n        data: null,\n    },\n    popular_repo: {\n        loading: false,\n        error :null,\n        data: null,\n    },\n    hottest_repo: {\n        loading: false,\n        error : null,\n        data : null,\n    },\n    all_attendances_by_dates: {\n        loading : false,\n        error : null,\n        data : null,\n    },\n    latest_challenge_attendances_by_user:{\n        loading: false,\n        error: null,\n        data : null,\n    }\n}\n\nconst analytics = createReducer<AnalyticsState, AnalyticsAction>(intialState, {\n    [GET_SUMMARY]: state=>({\n        ...state,\n        summary: {\n            loading:true,\n            error:null,\n            data:null,\n        }\n    }),\n    [GET_SUMMARY_SUCCESS]:(state, action)=>({\n        ...state,\n        summary:{\n            loading: false,\n            error: null,\n            data: action.payload\n        }\n    }),\n    [GET_SUMMARY_ERROR]:(state, action)=>({\n        ...state,\n        summary:{\n            loading: false,\n            error: action.payload,\n            data: null,\n        }\n    }),\n    // 모든 인원의 참석률 \n    [GET_ALL_ATTENDANCES]:state=>({\n        ...state,\n        all_attendances:{\n            loading:true,\n            error:null,\n            data:null,\n        },\n    }),\n    [GET_ALL_ATTENDANCES_SUCCESS]:(state,action)=>({\n        ...state, \n        all_attendances:{\n            loading: false,\n            error: null,\n            data: action.payload\n        }\n    }),\n    [GET_ALL_ATTENDANCES_ERROR]:(state, action)=>({\n        ...state,\n        all_attendances:{\n            loading:false,\n            error: action.payload,\n            data: null,\n        }\n    }),\n    // 일자별 참석률 \n    [GET_ALL_ATTENDANCES_BY_DATES]:state=>({\n        ...state,\n        all_attendances_by_dates:{\n            loading:true,\n            error:null,\n            data:null,\n        },\n    }),\n    [GET_ALL_ATTENDANCES_BY_DATES_SUCCESS]:(state,action)=>({\n        ...state, \n        all_attendances_by_dates:{\n            loading: false,\n            error: null,\n            data: action.payload\n        }\n    }),\n    [GET_ALL_ATTENDANCES_BY_DATES_ERROR]:(state, action)=>({\n        ...state,\n        all_attendances_by_dates:{\n            loading:false,\n            error: action.payload,\n            data: null,\n        }\n    }),\n    // 언어 사용률 조회\n    [GET_LANGUAGES_POPULARITY]:state=>({\n        ...state,\n        languages:{\n            loading:true,\n            error:null,\n            data:null,\n        },\n    }),\n    [GET_LANGUAGES_POPULARITY_SUCCESS]:(state,action)=>({\n        ...state, \n        languages:{\n            loading: false,\n            error: null,\n            data: action.payload\n        }\n    }),\n    [GET_LANGUAGES_POPULARITY_ERROR]:(state, action)=>({\n        ...state,\n        languages:{\n            loading:false,\n            error: action.payload,\n            data: null,\n        }\n    }),\n    // 유명한 저장소 \n    [GET_POPULAR_REPOSITORY]:state=>({\n        ...state,\n        popular_repo:{\n            loading:true,\n            error:null,\n            data:null\n        }\n    }),\n    [GET_POPULAR_REPOSITORY_SUCCESS]:(state,action)=>({\n        ...state, \n        popular_repo:{\n            loading: false,\n            error: null,\n            data: action.payload\n        }\n    }),\n    [GET_POPULAR_REPOSITORY_ERROR]:(state, action)=>({\n        ...state,\n        popular_repo:{\n            loading:false,\n            error: action.payload,\n            data: null\n        }\n    }),\n    // 인증 저장소 \n    [GET_HOTTEST_REPOSITORY]:state=>({\n        ...state,\n        hottest_repo:{\n            loading:true,\n            error:null,\n            data:null,\n        }\n    }),\n    [GET_HOTTEST_REPOSITORY_SUCCESS]:(state,action)=>({\n        ...state, \n        hottest_repo:{\n            loading: false,\n            error: null,\n            data: action.payload\n        }\n    }),\n    [GET_HOTTEST_REPOSITORY_ERROR]:(state, action)=>({\n        ...state,\n        hottest_repo:{\n            loading:false,\n            error: action.payload,\n            data: null,\n        }\n    }),\n    //\n    [GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER]:state=>({\n        ...state,\n        latest_challenge_attendances_by_user:{\n            loading:true,\n            error:null,\n            data:null,\n        }\n    }),\n    [GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_SUCCESS]:(state,action)=>({\n        ...state, \n        latest_challenge_attendances_by_user:{\n            loading: false,\n            error: null,\n            data: action.payload\n        }\n    }),\n    [GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_ERROR]:(state, action)=>({\n        ...state,\n        latest_challenge_attendances_by_user:{\n            loading:false,\n            error: action.payload,\n            data: null,\n        }\n    }),\n    [CLEAR_LATEST_CHALLENGE_ATTENDANCES_BY_USER]: (state)=>({\n        ...state,\n        latest_challenge_attendances_by_user:{\n            ...intialState.latest_challenge_attendances_by_user\n        }\n    }),\n});\n\nexport default analytics;","import { createAsyncAction } from 'typesafe-actions';\nimport { Summary, AllAttendances, Languages, PopularRepository, AllAttendancesByDates, LatestChallengeAttendancesByUserReponse, HottestRepository } from '../../api/analytics';\nimport { AxiosError } from 'axios';\n\n\nexport const GET_SUMMARY = 'analytics/GET_SUMMARY';\nexport const GET_SUMMARY_SUCCESS = 'analytics/GET_SUMMARY_SUCCESS';\nexport const GET_SUMMARY_ERROR = 'analytics/GET_SUMMARY_ERROR';\n\nexport const GET_ALL_ATTENDANCES = 'analytics/GET_ALL_ATTENDANCES';\nexport const GET_ALL_ATTENDANCES_SUCCESS = 'analytics/GET_ALL_ATTENDANCES_SUCCESS';\nexport const GET_ALL_ATTENDANCES_ERROR = 'analytics/GET_ALL_ATTENDANCES_ERROR';\n\nexport const GET_ALL_ATTENDANCES_BY_DATES = 'analytics/GET_ALL_ATTENDANCES_BY_DATES';\nexport const GET_ALL_ATTENDANCES_BY_DATES_SUCCESS = 'analytics/GET_ALL_ATTENDANCES_BY_DATES_SUCCESS';\nexport const GET_ALL_ATTENDANCES_BY_DATES_ERROR = 'analytics/GET_ALL_ATTENDANCES_BY_DATES_ERROR';\n\nexport const GET_LANGUAGES_POPULARITY = 'analytics/GET_LANGUAGES_POPULARITY';\nexport const GET_LANGUAGES_POPULARITY_SUCCESS = 'analytics/GET_LANGUAGES_POPULARITY_SUCCESS';\nexport const GET_LANGUAGES_POPULARITY_ERROR = 'analytics/GET_LANGUAGES_POPULARITY_ERROR';\n\nexport const GET_POPULAR_REPOSITORY = 'analytics/GET_POPULAR_REPOSITORY';\nexport const GET_POPULAR_REPOSITORY_SUCCESS = 'analytics/GET_POPULAR_REPOSITORY_SUCCESS';\nexport const GET_POPULAR_REPOSITORY_ERROR = 'analytics/GET_POPULAR_REPOSITORY_ERROR';\n\nexport const GET_HOTTEST_REPOSITORY = 'analytics/GET_HOTTESTD_REPOSITORY';\nexport const GET_HOTTEST_REPOSITORY_SUCCESS = 'analytics/GET_HOTTEST_REPOSITORY_SUCCESS';\nexport const GET_HOTTEST_REPOSITORY_ERROR = 'analytics/GET_HOTTEST_REPOSITORY_ERROR';\n\nexport const GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER = 'analytics/GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER';\nexport const GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_SUCCESS = 'analytics/GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_SUCCESS';\nexport const GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_ERROR = 'analytics/GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_ERROR';\nexport const CLEAR_LATEST_CHALLENGE_ATTENDANCES_BY_USER = 'analytics/CLEAR_LATEST_CHALLENGE_ATTENDANCES_BY_USER';\n\nexport const getSummaryAsync = createAsyncAction(\n    GET_SUMMARY,\n    GET_SUMMARY_SUCCESS,\n    GET_SUMMARY_ERROR\n)<undefined, Summary, AxiosError>();\n\nexport const getAllAttendancesAsync = createAsyncAction(\n    GET_ALL_ATTENDANCES,\n    GET_ALL_ATTENDANCES_SUCCESS,\n    GET_ALL_ATTENDANCES_ERROR,\n)<undefined, AllAttendances, AxiosError>();\n\nexport const getAllAttendancesByDatesAsync = createAsyncAction(\n    GET_ALL_ATTENDANCES_BY_DATES,\n    GET_ALL_ATTENDANCES_BY_DATES_SUCCESS,\n    GET_ALL_ATTENDANCES_BY_DATES_ERROR,\n)<undefined, AllAttendancesByDates, AxiosError>();\n\nexport const getLanguagesPopularityAsync = createAsyncAction(\n    GET_LANGUAGES_POPULARITY,\n    GET_LANGUAGES_POPULARITY_SUCCESS,\n    GET_LANGUAGES_POPULARITY_ERROR,\n)<undefined, Languages, AxiosError>();\n\nexport const getPopularRepositoryAsync = createAsyncAction(\n    GET_POPULAR_REPOSITORY,\n    GET_POPULAR_REPOSITORY_SUCCESS,\n    GET_POPULAR_REPOSITORY_ERROR\n)<undefined, PopularRepository, AxiosError>();\n\nexport const getHottestRepositoryAsync = createAsyncAction(\n    GET_HOTTEST_REPOSITORY,\n    GET_HOTTEST_REPOSITORY_SUCCESS,\n    GET_HOTTEST_REPOSITORY_ERROR\n)<undefined,HottestRepository, AxiosError>();\n\nexport const getLatestChallengeAttendancesByUserAsync = createAsyncAction(\n    GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER,\n    GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_SUCCESS,\n    GET_LATEST_CHALLENGE_ATTENDANCES_BY_USER_ERROR,\n    CLEAR_LATEST_CHALLENGE_ATTENDANCES_BY_USER,\n)<undefined, LatestChallengeAttendancesByUserReponse, AxiosError, undefined>();","import { ThunkAction } from \"redux-thunk\";\nimport { RootState } from \"..\";\nimport { AnalyticsAction } from \"./types\";\nimport {\n    getSummary,\n    getAllAttendances,\n    getLanguagesPopularity,\n    getHottestRepository,\n    getPopularRepository,\n    getAllAttendancesByDates,\n    getLatestChallengeAttendancesByUser\n} from \"../../api/analytics\";\nimport {\n    getSummaryAsync,\n    getAllAttendancesAsync,\n    getLanguagesPopularityAsync,\n    getHottestRepositoryAsync,\n    getPopularRepositoryAsync,\n    getAllAttendancesByDatesAsync,\n    getLatestChallengeAttendancesByUserAsync,\n} from \"./actions\";\n\nexport function getSummaryThunk(): ThunkAction<\n    void,\n    RootState,\n    null,\n    AnalyticsAction\n> {\n    return async (dispatch) => {\n        const { request, success, failure } = getSummaryAsync;\n        dispatch(request());\n        try {\n            const summary = await getSummary();\n            dispatch(success(summary));\n        } catch (e) {\n            dispatch(failure(e));\n        }\n    };\n}\n\nexport function getAllAttendancesThunk(): ThunkAction<\n    void,\n    RootState,\n    null,\n    AnalyticsAction\n> {\n    return async (dispatch) => {\n        const { request, success, failure } = getAllAttendancesAsync;\n        dispatch(request());\n        try {\n            const all_attendances = await getAllAttendances();\n            dispatch(success(all_attendances));\n        } catch (e) {\n            dispatch(failure(e));\n        }\n    };\n}\n\nexport function getAllAttendancesByDatesThunk(): ThunkAction<\n    void,\n    RootState,\n    null,\n    AnalyticsAction\n> {\n    return async dispatch=>{\n        const { request, success, failure } = getAllAttendancesByDatesAsync;\n        dispatch(request());\n        try{\n            const response = await getAllAttendancesByDates();\n            dispatch(success(response));\n        }\n        catch (e){\n            dispatch(failure(e));\n        }\n    }\n}\nexport function getLanguagesPopularityThunk(): ThunkAction<\n    void,\n    RootState,\n    null,\n    AnalyticsAction\n> {\n    return async (dispatch) => {\n        const { request, success, failure } = getLanguagesPopularityAsync;\n        dispatch(request);\n        try {\n            const response = await getLanguagesPopularity();\n            dispatch(success(response));\n        } catch (e) {\n            dispatch(failure(e));\n        }\n    };\n}\n\nexport function getPopularRepositoryThunk(): ThunkAction<\n    void,\n    RootState,\n    null,\n    AnalyticsAction\n> {\n    return async (dispatch) => {\n        const { request, success, failure } = getPopularRepositoryAsync;\n        dispatch(request());\n        try {\n            const response = await getPopularRepository();\n            dispatch(success(response));\n        } catch (e) {\n            dispatch(failure(e));\n        }\n    };\n}\n\nexport function getHottestRepositoryThunk(): ThunkAction<\n    void,\n    RootState,\n    null,\n    AnalyticsAction\n> {\n    return async (dispatch) => {\n        const { request, success, failure } = getHottestRepositoryAsync;\n        dispatch(request());\n        try {\n            const response = await getHottestRepository();\n            dispatch(success(response));\n        } catch (e) {\n            dispatch(failure(e));\n        }\n    };\n}\n\nexport function getLatestChallengeAttendancesByUserThunk(user_name:string): ThunkAction<\nvoid, RootState, null, AnalyticsAction>{\n    return async dispatch=>{\n        const { request, success, failure } = getLatestChallengeAttendancesByUserAsync;\n        dispatch(request());\n        try{\n            const res = await getLatestChallengeAttendancesByUser(user_name);\n            dispatch(success(res));\n        }\n        catch(e){\n            dispatch(failure(e));\n        }\n    }\n}\n\nexport function clearLatestChallengeAttendancesByUserThunk():ThunkAction<void, RootState, null, AnalyticsAction>{\n    return dispatch=>{\n        const { cancel } = getLatestChallengeAttendancesByUserAsync;\n        dispatch(cancel());\n    }\n}","import { createReducer } from \"typesafe-actions\";\nimport { UserState, UserAction } from \"./types\";\nimport {\n    GET_USER_INFO,\n    GET_USER_INFO_SUCCESS,\n    GET_USER_INFO_ERROR,\n    GET_USERS_INFO,\n    GET_USERS_INFO_SUCCESS,\n    GET_USERS_INFO_ERROR,\n    POST_USER_INFO,\n    POST_USER_INFO_SUCCESS,\n    POST_USER_INFO_ERROR,\n    CLEAR_POST_USER_INFO,\n    CLEAR_USER_INFO,\n    CLEAR_USERS_INFO,\n    \n    GET_USERS_SEARCH,\n    GET_USERS_SEARCH_SUCCESS,\n    GET_USERS_SEARCH_ERROR,\n    CLEAR_USERS_SEARCH,\n\n    GET_USERS_PARTICIPATED_LATEST_CHALLENGE_ERROR,\n    GET_USERS_PARTICIPATED_LATEST_CHALLENGE_SUCCESS,\n    GET_USERS_PARTICIPATED_LATEST_CHALLENGE,\n    CLEAR_USERS_PARTICIPATED_LATEST_CHALLENGE,\n} from \"./actions\";\n\nconst initialState: UserState = {\n    user: {\n        loading: false,\n        error: null,\n        data: null,\n    },\n    users: {\n        loading: false,\n        error: null,\n        data: null,\n    },\n    post_user: {\n        loading: false,\n        error: null,\n        data: null,\n    },\n    searched_users:{\n        loading: false,\n        error: null,\n        data: null,\n    },\n    users_participated_latest_challenge:{\n        loading: false,\n        error : null,\n        data : null,\n    }\n};\n\nconst user = createReducer<UserState, UserAction>(initialState, {\n    [GET_USER_INFO]: (state) => ({\n        ...state,\n        user: {\n            loading: true,\n            error: null,\n            data: null,\n        },\n    }),\n    [GET_USER_INFO_SUCCESS]: (state, action) => ({\n        ...state,\n        user: {\n            loading: false,\n            error: null,\n            data: action.payload,\n        },\n    }),\n    [GET_USER_INFO_ERROR]: (state, action) => ({\n        ...state,\n        user: {\n            loading: false,\n            error: action.payload,\n            data: null,\n        },\n    }),\n    [CLEAR_USER_INFO]: (state: any) => ({\n        ...state,\n        user: {...initialState.user},\n    }),\n    // 모든 사용자 정보\n    [GET_USERS_INFO]: (state) => ({\n        ...state,\n        user: {\n            loading: true,\n            error: null,\n            data: null,\n        },\n    }),\n    [GET_USERS_INFO_SUCCESS]: (state, action) => ({\n        ...state,\n        users: {\n            loading: false,\n            error: null,\n            data: action.payload,\n        },\n    }),\n    [GET_USERS_INFO_ERROR]: (state, action) => ({\n        ...state,\n        users: {\n            loading: false,\n            error: action.payload,\n            data: null,\n        },\n    }),\n    [CLEAR_USERS_INFO]: (state:any)=>({\n        ...state,\n        users:{...initialState.users}\n    }),\n    // 사용자 정보 추가하기\n    [POST_USER_INFO]: (state) => ({\n        ...state,\n        post_user: {\n            loading: true,\n            error: null,\n            data: null,\n        },\n    }),\n    [POST_USER_INFO_SUCCESS]: (state, action) => ({\n        ...state,\n        post_user: {\n            loading: false,\n            error: null,\n            data: action.payload,\n        },\n    }),\n    [POST_USER_INFO_ERROR]: (state, action) => ({\n        ...state,\n        post_user: {\n            loading: false,\n            error: action.payload,\n            data: null,\n        },\n    }),\n    [CLEAR_POST_USER_INFO]: (state:any)=>({\n        ...state,\n        post_user : {\n            ...initialState.post_user\n        }\n    }),\n    // 사용자 검색하기\n    [GET_USERS_SEARCH]: (state) => ({\n        ...state,\n        searched_users: {\n            loading: true,\n            error: null,\n            data: null,\n        },\n    }),\n    [GET_USERS_SEARCH_SUCCESS]: (state, action) => ({\n        ...state,\n        searched_users: {\n            loading: false,\n            error: null,\n            data: action.payload,\n        },\n    }),\n    [GET_USERS_SEARCH_ERROR]: (state, action) => ({\n        ...state,\n        searched_users: {\n            loading: false,\n            error: action.payload,\n            data: null,\n        },\n    }),\n    [CLEAR_USERS_SEARCH]: (state:any)=>({\n        ...state,\n        searched_users : {\n            ...initialState.searched_users\n        }\n    }),\n    // 최신 도전 일자에 참여중인 사용자 목록\n    [GET_USERS_PARTICIPATED_LATEST_CHALLENGE]: (state) => ({\n        ...state,\n        users_participated_latest_challenge: {\n            loading: true,\n            error: null,\n            data: null,\n        },\n    }),\n    [GET_USERS_PARTICIPATED_LATEST_CHALLENGE_SUCCESS]: (state, action) => ({\n        ...state,\n        users_participated_latest_challenge: {\n            loading: false,\n            error: null,\n            data: action.payload,\n        },\n    }),\n    [GET_USERS_PARTICIPATED_LATEST_CHALLENGE_ERROR]: (state, action) => ({\n        ...state,\n        users_participated_latest_challenge: {\n            loading: false,\n            error: action.payload,\n            data: null,\n        },\n    }),\n    [CLEAR_USERS_PARTICIPATED_LATEST_CHALLENGE]: (state:any)=>({\n        ...state,\n        users_participated_latest_challenge : {\n            ...initialState.searched_users\n        }\n    }),\n});\n\nexport default user;\n"],"sourceRoot":""}